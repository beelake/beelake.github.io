{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/meadow/source/icons/avatar.gif","path":"icons/avatar.gif","modified":0,"renderable":1},{"_id":"themes/meadow/source/icons/favicon.ico","path":"icons/favicon.ico","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/iconfont.css","path":"css/iconfont.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css","path":"css/mdui.min.v0.4.3.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css.map","path":"css/mdui.min.v0.4.3.css.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css","path":"css/mdui.min.v1.0.0.css","modified":0,"renderable":1},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css.map","path":"css/mdui.min.v1.0.0.css.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js","path":"js/mdui.min.v0.4.3.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js.map","path":"js/mdui.min.v0.4.3.js.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js","path":"js/mdui.min.v1.0.0.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js.map","path":"js/mdui.min.v1.0.0.js.map","modified":0,"renderable":1},{"_id":"themes/meadow/source/js/meadow.js","path":"js/meadow.js","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff","path":"fonts/roboto/Roboto-Black.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff2","path":"fonts/roboto/Roboto-Black.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff","path":"fonts/roboto/Roboto-BlackItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff2","path":"fonts/roboto/Roboto-BlackItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff","path":"fonts/roboto/Roboto-BoldItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff2","path":"fonts/roboto/Roboto-BoldItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff","path":"fonts/roboto/Roboto-LightItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff2","path":"fonts/roboto/Roboto-LightItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff","path":"fonts/roboto/Roboto-MediumItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff2","path":"fonts/roboto/Roboto-MediumItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff","path":"fonts/roboto/Roboto-RegularItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff2","path":"fonts/roboto/Roboto-RegularItalic.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff","path":"fonts/roboto/Roboto-ThinItalic.woff","modified":0,"renderable":1},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff2","path":"fonts/roboto/Roboto-ThinItalic.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/ss/index.md","hash":"323cad0ebcec29ba04590195638e2770d2a52c49","modified":1610628732683},{"_id":"source/categories/index.md","hash":"a27539f6bf31ff8edafda7ff9234a5bc09ff4be9","modified":1610624725218},{"_id":"source/tags/index.md","hash":"77e0418f9db1766371706d76e110a416d6622fa6","modified":1610624437942},{"_id":"source/Funny-Baidu/index.md","hash":"de5d6a9aaa0519cf125ae11a12fbbd815d0a9148","modified":1609158262000},{"_id":"source/_posts/hexo+github博客搭建.md","hash":"c0cf89b5523b6c36e07702174114915407c6e77b","modified":1610624290248},{"_id":"source/Hexo/index.md","hash":"5656746f3f6f98dafcdeab1dd61cd82ca4e4ab35","modified":1609759846848},{"_id":"source/Beelake-Document/index.md","hash":"cd9cd7bec2f5193b1dcbabe98aece8ce3a34e91a","modified":1609387522691},{"_id":"source/_posts/洛谷 P2295-MICE 题解.md","hash":"bd23e7c83b756bb4ab1dfb87b3f4c605ce87804f","modified":1610624315292},{"_id":"source/_posts/从 0 开始制作 Hexo 博客主题.md","hash":"8fa926580945a536f42f3dfce2730388e452a2b7","modified":1610624302329},{"_id":"source/about/index.md","hash":"b83e330d0f7ce99f49f5e8d62d15a53d901d88bc","modified":1610540515627},{"_id":"source/_posts/hexo主题添加 mathjax.md","hash":"1b4abe8566ebad255d2304931ae05b66216f8f94","modified":1610624297497},{"_id":"source/_posts/猫国建设者外挂.md","hash":"2bf14cc7797e8cae0fb7cdbb6b0d84109656ccef","modified":1610625573211},{"_id":"source/_posts/小恐龙外挂.md","hash":"831efb386f98b6c640c0a37707356482ee8802d1","modified":1610625854730},{"_id":"themes/meadow/.gitattributes","hash":"d04461156a9224913f991cd1f89210454f3c3dc3","modified":1605444049000},{"_id":"themes/meadow/README.md","hash":"6a4ddc36823733993870d22ded41f158c134ef41","modified":1605444049000},{"_id":"themes/meadow/languages/en.yml","hash":"1137d18ac257adac58afefd903ab92d1a68a6d3b","modified":1605444049000},{"_id":"themes/meadow/layout/archive.ejs","hash":"7b07fa8bcc36828d016aa0dce0b463b9738ae641","modified":1605444049000},{"_id":"themes/meadow/LICENSE","hash":"b4d7662bb6b0b804c8fc94f7bc81f59dce0c36f3","modified":1605444049000},{"_id":"themes/meadow/layout/category.ejs","hash":"b802885669103479703bc75579cf2863caf0d44b","modified":1605444049000},{"_id":"themes/meadow/layout/index.ejs","hash":"d5d91a2d914018303fbe68c6b55e6f0370ff2cc7","modified":1605444049000},{"_id":"themes/meadow/_config.yml","hash":"c1237fb30973253bc74934f54149ad6708d0f455","modified":1610628745949},{"_id":"themes/meadow/layout/post.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1605444049000},{"_id":"themes/meadow/layout/tag.ejs","hash":"d950c1ab3c962d780e32e7fd632c4ded7e23f3fe","modified":1605444049000},{"_id":"themes/meadow/source/icons/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605444049000},{"_id":"themes/meadow/languages/zh-CN.yml","hash":"2dbec9f39a924d49f6c4a58541333f55352bb344","modified":1605444049000},{"_id":"themes/meadow/layout/_adsense/banner.ejs","hash":"195d2f233ed521bb78a9a3bff2321cf9cf36e1ab","modified":1605444049000},{"_id":"themes/meadow/layout/_adsense/footer.ejs","hash":"716d126c0522c875652ad7a72a61bb27de154765","modified":1605444049000},{"_id":"themes/meadow/layout/_adsense/sidebar.ejs","hash":"e9c790b43e942e7da17a4fa5df288755978b4654","modified":1605444049000},{"_id":"themes/meadow/layout/page.ejs","hash":"099a6b6bc1032b20cdc618aa9b1f2d43dd930f5a","modified":1605444049000},{"_id":"themes/meadow/layout/layout.ejs","hash":"a5d35f0f656e9a372fa29c8c62422d6e00abfebf","modified":1605444049000},{"_id":"themes/meadow/source/css/main.styl","hash":"7d51c8db174a5876a6d40511428f8285e78615d6","modified":1605444049000},{"_id":"themes/meadow/source/icons/favicon.ico","hash":"fb79fb50e5a9da722f4de142a45c996ef437476d","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/article.ejs","hash":"ade7474dbad1925fd314f2d0a3cd418c9c11743e","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/bodyload.ejs","hash":"3ceb496d8da8b35895698b4126038649610e86e0","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/head.ejs","hash":"97004000f429568fb16f08398793956c70488517","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/footer.ejs","hash":"16d84a7dffb698365c5c4871dc3ffd9d782f565b","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/pagination.ejs","hash":"0f0c772dec65ef07a07c2beacf06f89b035cf265","modified":1605444049000},{"_id":"themes/meadow/source/css/iconfont.css","hash":"a8d1c687062f7f2adbdb5e4bdd8b53107047e23a","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/sidebar.ejs","hash":"93442c981c5e6a0f6217186ef580062fbea6667b","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/header.ejs","hash":"b352f61914ca2f0609aca75ea8e1663a5d872211","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/headload.ejs","hash":"4cce3370c685832b586bd83e5d5134bcd08fc473","modified":1605444049000},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js","hash":"f64fd49e8cc1bb0679dd00cd1f11e9d111aac826","modified":1605444049000},{"_id":"themes/meadow/source/js/meadow.js","hash":"3fdfab667c0697354fc1ef96f6bc89d7331e404c","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/changyan.ejs","hash":"3a954d86a2a0ea96621e183cf89f16c99c387a3b","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/disqus.ejs","hash":"a8422c9bd22c24e8c09c1c188f71c46687b14211","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/gitalk.ejs","hash":"e2effdf5593a201e1d13379449fdd10f1cb77777","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/index.ejs","hash":"11b317c72f025f25c50c5f92551957e739a50d4c","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/livere.ejs","hash":"abeada8bef10dd50134e7319271f3e942acf9cbb","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/comment/valine.ejs","hash":"3e7635e2f93ddd366c4b47f2066bcd81ce184a5e","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/math/katex.ejs","hash":"bf414ee8b9cadfeacc544c683ec01881c10e0430","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/analytics/baidu-analytics.ejs","hash":"eb3b16d53b191c724853a76a671f001bf2146b44","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/analytics/cnzz-analytics.ejs","hash":"3c94798a0031383fabefbf847be5cb42f2ff5573","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/analytics/google-analytics.ejs","hash":"204d526b1c58b8ce36f73cc2057f970e70618357","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/analytics/tencent-analytics.ejs","hash":"99c9077c5d83d002d97d568211b8c03f291af288","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/page/categories.ejs","hash":"c6c1508f8bd86db7dd2dde630ad4ceb0c8337b36","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/page/collapse.ejs","hash":"3272955985f12755549fcf4af5a7ddeca9468843","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/page/tags.ejs","hash":"1ff3383ebff78d378b9a3f8f2efbb17e3033d836","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/post/post-header.ejs","hash":"75d3b5125a2554ad7cd4ba389e522c70a807cf28","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/post/post-share.ejs","hash":"0b6f444fea25679ed811d720f2dbf66f23dbd81c","modified":1605444049000},{"_id":"themes/meadow/layout/_partial/post/post-tag.ejs","hash":"3290b073a46c32a80687ae45ef3ae1dd7ff00324","modified":1605444049000},{"_id":"themes/meadow/source/css/_partial/page.styl","hash":"ae7ef4045c821343496dab977c80cc18ab1bde6b","modified":1605444049000},{"_id":"themes/meadow/source/css/_partial/post.styl","hash":"b71429b515dd888b17d72d0fffe8ec9748406e5a","modified":1605444049000},{"_id":"themes/meadow/source/css/_partial/search.styl","hash":"83c42be8b8a0ce784cc7aa7cf09c90f825c87fd1","modified":1605444049000},{"_id":"themes/meadow/source/css/_partial/sidebar.styl","hash":"c24846ad5bef515e8ee90d4c7beb7b29581b8c2f","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1605444049000},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js","hash":"178ecc7437f1ec342762b0da74cbde3dd10342cd","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1605444049000},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css","hash":"7356f5d95c9d90254ea074ecaecae24e6a5a124e","modified":1605444049000},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css","hash":"5da28cd08e3bd4f759ee947e7e302e35a53831c2","modified":1605444049000},{"_id":"themes/meadow/source/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1605444049000},{"_id":"themes/meadow/source/js/mdui.min.v1.0.0.js.map","hash":"29dbca6a99d7798fb46dcec4c9632e5c0ead4319","modified":1605444049000},{"_id":"themes/meadow/source/js/mdui.min.v0.4.3.js.map","hash":"7a92572e30f7b9bd09350efb04fd21f7b6230177","modified":1605444049000},{"_id":"themes/meadow/source/css/_partial/highlight.styl","hash":"7580c2dfac5ac1b680d656541b8dd793c9882f9e","modified":1610627210685},{"_id":"themes/meadow/source/css/mdui.min.v0.4.3.css.map","hash":"925eb00f83a5d7b19304a426ea574dd4de69acd1","modified":1605444049000},{"_id":"themes/meadow/layout/_plugin/math/mathjax.ejs","hash":"9d7af5c07e333d1313484728becb7cc6cb64953f","modified":1605444049000},{"_id":"themes/meadow/source/css/mdui.min.v1.0.0.css.map","hash":"96acfc653f0205b4127c309bab1c1d8f5180fd77","modified":1605444049000},{"_id":"public/Funny-Baidu/index.html","hash":"ea36ce1bdb84345baa5106c1ef9dcd4b2b62885b","modified":1610682581719},{"_id":"public/Beelake-Document/index.html","hash":"66a3588f5fddd42ab471b733b31aefa2ee4641c7","modified":1610682581719},{"_id":"public/ss/index.html","hash":"1ca3a8e26284ac2dc384d7a62c7a7b4dc4f54b10","modified":1610682581719},{"_id":"public/categories/index.html","hash":"fb8ebd1b601e95b0492e4e2088d8f5d8a2d22819","modified":1610682581719},{"_id":"public/tags/index.html","hash":"b67e4e34ab09c6c75206a1d5c46d498c5939f443","modified":1610682581719},{"_id":"public/Hexo/index.html","hash":"cf1894f46d8cc4136bd6bd387dd4ec9e4b018113","modified":1610682581719},{"_id":"public/about/index.html","hash":"1296b8ae0c53080fadcf8afc756168d997de2f63","modified":1610682581719},{"_id":"public/archives/index.html","hash":"f7e8e13a0c62c08fa6592d202c6161296cc6095d","modified":1610682581719},{"_id":"public/archives/2020/index.html","hash":"42d2e4618a32c4f6bbfee17ccc069481ac18c38f","modified":1610682581719},{"_id":"public/archives/2020/10/index.html","hash":"42d2e4618a32c4f6bbfee17ccc069481ac18c38f","modified":1610682581719},{"_id":"public/archives/2021/index.html","hash":"01373e58719df7ddd1c98b7f2021cd3ec530050d","modified":1610682581719},{"_id":"public/archives/2021/01/index.html","hash":"01373e58719df7ddd1c98b7f2021cd3ec530050d","modified":1610682581719},{"_id":"public/categories/Hexo/index.html","hash":"0d9d37bd4c52285c8951f46e914d7fa15fdf3b37","modified":1610682581719},{"_id":"public/categories/Game/index.html","hash":"9ece2a0b975d909855b3a1469a0af4024713a3ab","modified":1610682581719},{"_id":"public/categories/C/index.html","hash":"36c698cd07c5ef2528685e054365adf451cd9c8e","modified":1610682581719},{"_id":"public/tags/Hexo/index.html","hash":"dcc5349f5aa4f079fe869dbfa2696f6fc3c7da5f","modified":1610682581719},{"_id":"public/tags/Dino/index.html","hash":"3d16e91456743ffa03a57398c3821c1c4b105be3","modified":1610682581719},{"_id":"public/tags/Luogu/index.html","hash":"8645975143d707bf302d9f6e47bc1a7d17fa6989","modified":1610682581719},{"_id":"public/tags/Cats/index.html","hash":"5f9aeac3e5a549b04306e5ef009ad9dda26659f0","modified":1610682581719},{"_id":"public/Game/Dinosaur/index.html","hash":"23d9485090c875727ef365e2f7c55be2e3204f66","modified":1610682581719},{"_id":"public/Game/Cats-Country/index.html","hash":"5a7d660e2008df3f50a10c0bbe12b4ab3eb76e55","modified":1610682581719},{"_id":"public/Hexo/Mathjax/index.html","hash":"6103aefd843ca6fd19a3ab168a5867f14491c445","modified":1610682581719},{"_id":"public/Hexo/Theme-Made-By-Myself/index.html","hash":"ed5740338d384d12398293f9f89fcbdb22a0406b","modified":1610682581719},{"_id":"public/Explanation/Luogu-P2295-Mice/index.html","hash":"a6b573bc8f55adc46506cfd601ffbda84e54e4e8","modified":1610682581719},{"_id":"public/Hexo/Hexo+GitHub-Blog-Building/index.html","hash":"5b534700b68e489824a3e3273019f869d4c55eff","modified":1610682581719},{"_id":"public/index.html","hash":"71d4db5612ef4457b637b5adc9074f56cf694228","modified":1610682581719},{"_id":"public/icons/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610682581719},{"_id":"public/icons/favicon.ico","hash":"fb79fb50e5a9da722f4de142a45c996ef437476d","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1610682581719},{"_id":"public/css/main.css","hash":"d063752e4b7ebdae407436daa696bb1235fa6cc1","modified":1610682581719},{"_id":"public/js/meadow.js","hash":"3fdfab667c0697354fc1ef96f6bc89d7331e404c","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1610682581719},{"_id":"public/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1610682581719},{"_id":"public/css/iconfont.css","hash":"a8d1c687062f7f2adbdb5e4bdd8b53107047e23a","modified":1610682581719},{"_id":"public/js/mdui.min.v0.4.3.js","hash":"f64fd49e8cc1bb0679dd00cd1f11e9d111aac826","modified":1610682581719},{"_id":"public/js/mdui.min.v0.4.3.js.map","hash":"7a92572e30f7b9bd09350efb04fd21f7b6230177","modified":1610682581719},{"_id":"public/js/mdui.min.v1.0.0.js.map","hash":"29dbca6a99d7798fb46dcec4c9632e5c0ead4319","modified":1610682581719},{"_id":"public/js/mdui.min.v1.0.0.js","hash":"178ecc7437f1ec342762b0da74cbde3dd10342cd","modified":1610682581719},{"_id":"public/css/mdui.min.v0.4.3.css.map","hash":"925eb00f83a5d7b19304a426ea574dd4de69acd1","modified":1610682581719},{"_id":"public/css/mdui.min.v1.0.0.css.map","hash":"96acfc653f0205b4127c309bab1c1d8f5180fd77","modified":1610682581719},{"_id":"public/css/mdui.min.v0.4.3.css","hash":"7356f5d95c9d90254ea074ecaecae24e6a5a124e","modified":1610682581719},{"_id":"public/css/mdui.min.v1.0.0.css","hash":"5da28cd08e3bd4f759ee947e7e302e35a53831c2","modified":1610682581719}],"Category":[{"name":"Hexo","_id":"ckjxqtmjg0003iwb1f2ac9tbh"},{"name":"Game","_id":"ckjxqtmjo000giwb1c5yo1uj5"},{"name":"C++","_id":"ckjxqtmjq000niwb1bhquhvqc"}],"Data":[],"Page":[{"title":"[Beelake]document","date":"2020-11-27T15:35:17.000Z","_content":"\n介绍 **主题简介 | 主题食用 | 更新日志**\n\n<!--more-->\n\n## 主题简介\n\n### 主题名\n\n&#8195;名称：$Beelake$\n\n&#8195;来源：$[元祖]Beelake$\n\n### 开发人员\n\n&#8192;$[元祖]Beelake$\n\n### 其他\n\n&#8195;- 感谢支持\n\n&#8195;- 如果有好的[提议](https://github.com/beelake/beelake.github.io/issues)，$beelake$ 都会听的 😝\n\n## 主题食用\n\n### #$Download$ 下载\n\n&#8195;[点我下载合适的版本吧](https://github.com/beelake/Theme-beelake)\n\n### #$Basic Settings$ 基础设置\n\n| ddd | ddd | \\alpha","source":"Beelake-Document/index.md","raw":"---\ntitle: '[Beelake]document'\ndate: 2020-11-27 23:35:17\n---\n\n介绍 **主题简介 | 主题食用 | 更新日志**\n\n<!--more-->\n\n## 主题简介\n\n### 主题名\n\n&#8195;名称：$Beelake$\n\n&#8195;来源：$[元祖]Beelake$\n\n### 开发人员\n\n&#8192;$[元祖]Beelake$\n\n### 其他\n\n&#8195;- 感谢支持\n\n&#8195;- 如果有好的[提议](https://github.com/beelake/beelake.github.io/issues)，$beelake$ 都会听的 😝\n\n## 主题食用\n\n### #$Download$ 下载\n\n&#8195;[点我下载合适的版本吧](https://github.com/beelake/Theme-beelake)\n\n### #$Basic Settings$ 基础设置\n\n| ddd | ddd | \\alpha","updated":"2020-12-31T04:05:22.691Z","path":"Beelake-Document/index.html","comments":1,"layout":"page","_id":"ckjxqtmjb0000iwb196lka8wd","content":"<p>介绍 <strong>主题简介 | 主题食用 | 更新日志</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"主题简介\"><a href=\"#主题简介\" class=\"headerlink\" title=\"主题简介\"></a>主题简介</h2><h3 id=\"主题名\"><a href=\"#主题名\" class=\"headerlink\" title=\"主题名\"></a>主题名</h3><p>&#8195;名称：$Beelake$</p>\n<p>&#8195;来源：$[元祖]Beelake$</p>\n<h3 id=\"开发人员\"><a href=\"#开发人员\" class=\"headerlink\" title=\"开发人员\"></a>开发人员</h3><p>&#8192;$[元祖]Beelake$</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>&#8195;- 感谢支持</p>\n<p>&#8195;- 如果有好的<a href=\"https://github.com/beelake/beelake.github.io/issues\">提议</a>，$beelake$ 都会听的 😝</p>\n<h2 id=\"主题食用\"><a href=\"#主题食用\" class=\"headerlink\" title=\"主题食用\"></a>主题食用</h2><h3 id=\"Download-下载\"><a href=\"#Download-下载\" class=\"headerlink\" title=\"#$Download$ 下载\"></a>#$Download$ 下载</h3><p>&#8195;<a href=\"https://github.com/beelake/Theme-beelake\">点我下载合适的版本吧</a></p>\n<h3 id=\"Basic-Settings-基础设置\"><a href=\"#Basic-Settings-基础设置\" class=\"headerlink\" title=\"#$Basic Settings$ 基础设置\"></a>#$Basic Settings$ 基础设置</h3><p>| ddd | ddd | \\alpha</p>\n","site":{"data":{}},"excerpt":"<p>介绍 <strong>主题简介 | 主题食用 | 更新日志</strong></p>","more":"<h2 id=\"主题简介\"><a href=\"#主题简介\" class=\"headerlink\" title=\"主题简介\"></a>主题简介</h2><h3 id=\"主题名\"><a href=\"#主题名\" class=\"headerlink\" title=\"主题名\"></a>主题名</h3><p>&#8195;名称：$Beelake$</p>\n<p>&#8195;来源：$[元祖]Beelake$</p>\n<h3 id=\"开发人员\"><a href=\"#开发人员\" class=\"headerlink\" title=\"开发人员\"></a>开发人员</h3><p>&#8192;$[元祖]Beelake$</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>&#8195;- 感谢支持</p>\n<p>&#8195;- 如果有好的<a href=\"https://github.com/beelake/beelake.github.io/issues\">提议</a>，$beelake$ 都会听的 😝</p>\n<h2 id=\"主题食用\"><a href=\"#主题食用\" class=\"headerlink\" title=\"主题食用\"></a>主题食用</h2><h3 id=\"Download-下载\"><a href=\"#Download-下载\" class=\"headerlink\" title=\"#$Download$ 下载\"></a>#$Download$ 下载</h3><p>&#8195;<a href=\"https://github.com/beelake/Theme-beelake\">点我下载合适的版本吧</a></p>\n<h3 id=\"Basic-Settings-基础设置\"><a href=\"#Basic-Settings-基础设置\" class=\"headerlink\" title=\"#$Basic Settings$ 基础设置\"></a>#$Basic Settings$ 基础设置</h3><p>| ddd | ddd | \\alpha</p>"},{"title":"留言板","date":"2021-01-14T11:41:19.000Z","_content":"\n欢迎各位留言\n\n另外，若要加入友链，请在下方评论区留言，格式如下：\n\n> 名称：XXX\n>\n> 网址：XXXX","source":"ss/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-14 19:41:19\n---\n\n欢迎各位留言\n\n另外，若要加入友链，请在下方评论区留言，格式如下：\n\n> 名称：XXX\n>\n> 网址：XXXX","updated":"2021-01-15T03:58:24.702Z","path":"ss/index.html","_id":"ckjxqtmji0005iwb1042n40i6","comments":1,"layout":"page","content":"<p>欢迎各位留言</p>\n<p>另外，若要加入友链，请在下方评论区留言，格式如下：</p>\n<blockquote>\n<p>名称：XXX</p>\n<p>网址：XXXX</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎各位留言</p>\n<p>另外，若要加入友链，请在下方评论区留言，格式如下：</p>\n<blockquote>\n<p>名称：XXX</p>\n<p>网址：XXXX</p>\n</blockquote>\n"},{"title":"categories","date":"2021-01-14T11:41:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-01-14 19:41:19\ntype: categories\n---\n","updated":"2021-01-14T11:45:25.218Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckjxqtmji0006iwb1fja2f1uc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-14T11:39:16.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\n\ntitle: tags\ndate: 2021-01-14 19:39:16\ntype: tags\n\n---\n\n","updated":"2021-01-14T11:40:37.942Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckjxqtmjj0007iwb1hmnm3nbm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2021-01-13T00:22:16.000Z","_content":"\n","source":"about/index.md","raw":"---\ntitle: '关于'\ndate: 2021-1-13 8:22:16\n---\n\n","updated":"2021-01-13T12:21:55.627Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckjxqtmjk000aiwb1bvz52blm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"uuid":"0e63ccb1-4af5-b680-1d1e-c9b4b0cec905","title":"hexo+github博客搭建","date":"2020-10-18T08:09:54.000Z","link_c":"Hexo","link_name":"Hexo+GitHub-Blog-Building","top":2002,"mathjax":true,"_content":"\n\n\n## 准备\n\n先下载`git`和`nodejs`，[git](https://git-scm.com/downloads)、[nodejs](https://nodejs.org/en/download/).\n\n注意，`nodejs`用`msi`下载，不要下载`zip`\n\n<!--more-->\n\n打开`git`输入\n\n```\nnode -v\nnpm -v\n```\n\n检查nodejs是否下载好。\n\n若显示\n```\nXX.XX.XX或VXX.XX.XX\n```\n\n即可\n\n然后输入\n\n```\nnpm install -g hexo\n```\n\n等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有`done`没有`error`就行。\n\n## 本地建立\n\n新建一个文件夹，以下用`blog`代替。\n\n右键`blog`，打开`git bush`\n\n输入\n\n```\nhexo init blog\nnpm install\n```\n\n新建完成后，指定文件夹目录下有：\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- source：用来存放你的文章\n- themes：主题\n- _config.yml: 博客的配置文件\n\n`cd进入myblog`\n\n输入\n\n```\nhexo g\nhexo server\n```\n\n打开 [localhost:4000](localhost:4000) 查看\n\n## 网上建立\n首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在`GitHub.com`中看到一个`New repository`，新建仓库。\n​创建一个和你用户名相同的仓库，[后面加.github.io](http://XXX.github.io/)，只有这样，将来要部署到GitHub page的时候，才会被识别，[也就是xxxx.github.io](http://XXX.github.io/)，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。\n​回到你的git bash中，\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n这里的`yourname`输入你的`GitHub`用户名，`youremail`输入你`GitHub`的邮箱。这样`GitHub`才能知道你是不是对应它的账户。\n\n可以用以下两条，检查一下你有没有输对\n\n```\ngit config user.name\ngit config user.email\n```\n\n然后创建`SSH`,一路回车\n\n```\nssh-keygen -t rsa -C \"youremail\"\n```\n\n这个时候它会告诉你已经生成了`.ssh`的文件夹。在你的电脑中找到这个文件夹。\n\nssh，简单来讲，就是一个秘钥，其中，`id_rsa`是你这台电脑的私人秘钥，不能给别人看的，`id_rsa.pub`是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n\n而后在`GitHub`的`setting`中，找到`SSH keys`的设置选项，点击`New SSH key `把你的`id_rsa.pub`里面的信息复制进去。\n\n在`git bash`中，查看是否成功\n\n```\nssh -T git@github.com\n```\n\n这一步，我们就可以将hexo和GitHub关联起来，也就是将`hexo`生成的文章部署到GitHub上，打开站点配置文件 `_config.yml`，翻到最后，修改为\nYourgithubName就是你的GitHub账户\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后\n\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 顾名思义，生成静态文章，可以用 `hexo g`缩写\n​`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意`deploy`时可能要你输入`username`和`password`。\n\n过一会儿就可以在`http://yourname.github.io` 这个网站看到你的博客了！！(注意要过一会才会更新)","source":"_posts/hexo+github博客搭建.md","raw":"---\nuuid: 0e63ccb1-4af5-b680-1d1e-c9b4b0cec905\ntitle: hexo+github博客搭建\ndate: 2020-10-18 16:09:54\nlink_c: Hexo\nlink_name: Hexo+GitHub-Blog-Building\ntop: 2002\nmathjax: true\ntags: Hexo\ncategories: Hexo\n---\n\n\n\n## 准备\n\n先下载`git`和`nodejs`，[git](https://git-scm.com/downloads)、[nodejs](https://nodejs.org/en/download/).\n\n注意，`nodejs`用`msi`下载，不要下载`zip`\n\n<!--more-->\n\n打开`git`输入\n\n```\nnode -v\nnpm -v\n```\n\n检查nodejs是否下载好。\n\n若显示\n```\nXX.XX.XX或VXX.XX.XX\n```\n\n即可\n\n然后输入\n\n```\nnpm install -g hexo\n```\n\n等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有`done`没有`error`就行。\n\n## 本地建立\n\n新建一个文件夹，以下用`blog`代替。\n\n右键`blog`，打开`git bush`\n\n输入\n\n```\nhexo init blog\nnpm install\n```\n\n新建完成后，指定文件夹目录下有：\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- source：用来存放你的文章\n- themes：主题\n- _config.yml: 博客的配置文件\n\n`cd进入myblog`\n\n输入\n\n```\nhexo g\nhexo server\n```\n\n打开 [localhost:4000](localhost:4000) 查看\n\n## 网上建立\n首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在`GitHub.com`中看到一个`New repository`，新建仓库。\n​创建一个和你用户名相同的仓库，[后面加.github.io](http://XXX.github.io/)，只有这样，将来要部署到GitHub page的时候，才会被识别，[也就是xxxx.github.io](http://XXX.github.io/)，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。\n​回到你的git bash中，\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n这里的`yourname`输入你的`GitHub`用户名，`youremail`输入你`GitHub`的邮箱。这样`GitHub`才能知道你是不是对应它的账户。\n\n可以用以下两条，检查一下你有没有输对\n\n```\ngit config user.name\ngit config user.email\n```\n\n然后创建`SSH`,一路回车\n\n```\nssh-keygen -t rsa -C \"youremail\"\n```\n\n这个时候它会告诉你已经生成了`.ssh`的文件夹。在你的电脑中找到这个文件夹。\n\nssh，简单来讲，就是一个秘钥，其中，`id_rsa`是你这台电脑的私人秘钥，不能给别人看的，`id_rsa.pub`是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n\n而后在`GitHub`的`setting`中，找到`SSH keys`的设置选项，点击`New SSH key `把你的`id_rsa.pub`里面的信息复制进去。\n\n在`git bash`中，查看是否成功\n\n```\nssh -T git@github.com\n```\n\n这一步，我们就可以将hexo和GitHub关联起来，也就是将`hexo`生成的文章部署到GitHub上，打开站点配置文件 `_config.yml`，翻到最后，修改为\nYourgithubName就是你的GitHub账户\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后\n\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 顾名思义，生成静态文章，可以用 `hexo g`缩写\n​`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意`deploy`时可能要你输入`username`和`password`。\n\n过一会儿就可以在`http://yourname.github.io` 这个网站看到你的博客了！！(注意要过一会才会更新)","slug":"hexo+github博客搭建","published":1,"updated":"2021-01-14T11:38:10.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjxqtmjd0001iwb1c1y0b6by","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>先下载<code>git</code>和<code>nodejs</code>，<a href=\"https://git-scm.com/downloads\">git</a>、<a href=\"https://nodejs.org/en/download/\">nodejs</a>.</p>\n<p>注意，<code>nodejs</code>用<code>msi</code>下载，不要下载<code>zip</code></p>\n<a id=\"more\"></a>\n\n<p>打开<code>git</code>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n\n<p>检查nodejs是否下载好。</p>\n<p>若显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">XX.XX.XX或VXX.XX.XX<br></code></pre></td></tr></table></figure>\n\n<p>即可</p>\n<p>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<p>等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有<code>done</code>没有<code>error</code>就行。</p>\n<h2 id=\"本地建立\"><a href=\"#本地建立\" class=\"headerlink\" title=\"本地建立\"></a>本地建立</h2><p>新建一个文件夹，以下用<code>blog</code>代替。</p>\n<p>右键<code>blog</code>，打开<code>git bush</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo init blog<br>npm install<br></code></pre></td></tr></table></figure>\n\n<p>新建完成后，指定文件夹目录下有：</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n</ul>\n<p><code>cd进入myblog</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo g<br>hexo server<br></code></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"localhost:4000\">localhost:4000</a> 查看</p>\n<h2 id=\"网上建立\"><a href=\"#网上建立\" class=\"headerlink\" title=\"网上建立\"></a>网上建立</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在<code>GitHub.com</code>中看到一个<code>New repository</code>，新建仓库。<br>​创建一个和你用户名相同的仓库，<a href=\"http://xxx.github.io/\">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href=\"http://xxx.github.io/\">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br>​回到你的git bash中，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config --global user.name &quot;yourname&quot;<br>git config --global user.email &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure>\n\n<p>然后创建<code>SSH</code>,一路回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh-keygen -t rsa -C &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n\n<p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。</p>\n<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>\n<p>而后在<code>GitHub</code>的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key </code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在<code>git bash</code>中，查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>这一步，我们就可以将hexo和GitHub关联起来，也就是将<code>hexo</code>生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br>​<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p>\n<p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！(注意要过一会才会更新)</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>先下载<code>git</code>和<code>nodejs</code>，<a href=\"https://git-scm.com/downloads\">git</a>、<a href=\"https://nodejs.org/en/download/\">nodejs</a>.</p>\n<p>注意，<code>nodejs</code>用<code>msi</code>下载，不要下载<code>zip</code></p>","more":"<p>打开<code>git</code>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n\n<p>检查nodejs是否下载好。</p>\n<p>若显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">XX.XX.XX或VXX.XX.XX<br></code></pre></td></tr></table></figure>\n\n<p>即可</p>\n<p>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo<br></code></pre></td></tr></table></figure>\n\n<p>等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有<code>done</code>没有<code>error</code>就行。</p>\n<h2 id=\"本地建立\"><a href=\"#本地建立\" class=\"headerlink\" title=\"本地建立\"></a>本地建立</h2><p>新建一个文件夹，以下用<code>blog</code>代替。</p>\n<p>右键<code>blog</code>，打开<code>git bush</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo init blog<br>npm install<br></code></pre></td></tr></table></figure>\n\n<p>新建完成后，指定文件夹目录下有：</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n</ul>\n<p><code>cd进入myblog</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo g<br>hexo server<br></code></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"localhost:4000\">localhost:4000</a> 查看</p>\n<h2 id=\"网上建立\"><a href=\"#网上建立\" class=\"headerlink\" title=\"网上建立\"></a>网上建立</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在<code>GitHub.com</code>中看到一个<code>New repository</code>，新建仓库。<br>​创建一个和你用户名相同的仓库，<a href=\"http://xxx.github.io/\">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href=\"http://xxx.github.io/\">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br>​回到你的git bash中，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config --global user.name &quot;yourname&quot;<br>git config --global user.email &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure>\n\n<p>然后创建<code>SSH</code>,一路回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh-keygen -t rsa -C &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n\n<p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。</p>\n<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>\n<p>而后在<code>GitHub</code>的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key </code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在<code>git bash</code>中，查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>这一步，我们就可以将hexo和GitHub关联起来，也就是将<code>hexo</code>生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br>​<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p>\n<p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！(注意要过一会才会更新)</p>"},{"title":"hexo 主题 添加 mathjax","mathjax":true,"date":"2021-01-02T09:16:47.000Z","link_c":"Hexo","link_name":"Mathjax","top":2001,"_content":"\n$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$\n\n<!-- more -->\n\n首先，\n```\nnpm uninstall hexo-renderer-marked\n```\n\n然后\n```\nhexo install hexo-renderer-markdown-it\nnpm install hexo-renderer-kramed --save\n```\n\n最后，新建$layout/$_$markdown/mathjax.ejs:$\n\n```ejs\n<script>\n    if (typeof MathJax === 'undefined') {\n      window.MathJax = {\n        loader: {\n          source: {\n            '[tex]/amsCd': '[tex]/amscd',\n            '[tex]/AMScd': '[tex]/amscd'\n          }\n        },\n        tex: {\n          inlineMath: {'[+]': [['$', '$']]},\n          tags: 'ams'\n        },\n        options: {\n          renderActions: {\n            findScript: [10, doc => {\n              document.querySelectorAll('script[type^=\"math/tex\"]').forEach(node => {\n                const display = !!node.type.match(/; *mode=display/);\n                const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);\n                const text = document.createTextNode('');\n                node.parentNode.replaceChild(text, node);\n                math.start = {node: text, delim: '', n: 0};\n                math.end = {node: text, delim: '', n: 0};\n                doc.math.push(math);\n              });\n            }, '', false],\n            insertedScript: [200, () => {\n              document.querySelectorAll('mjx-container').forEach(node => {\n                let target = node.parentNode;\n                if (target.nodeName.toLowerCase() === 'li') {\n                  target.parentNode.classList.add('has-jax');\n                }\n              });\n            }, '', false]\n          }\n        }\n      };\n      (function () {\n        var script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3.0/es5/tex-mml-chtml.js';\n        script.defer = true;\n        document.head.appendChild(script);\n      })();\n    } else {\n      MathJax.startup.document.state(0);\n      MathJax.texReset();\n      MathJax.typeset();\n    }\n  </script>\n```\n\n","source":"_posts/hexo主题添加 mathjax.md","raw":"---\ntitle: hexo 主题 添加 mathjax\nmathjax: true\ndate: 2021-01-02 17:16:47\nlink_c: Hexo\nlink_name: Mathjax\ntop: 2001\ntags: Hexo\ncategories: Hexo\n---\n\n$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$\n\n<!-- more -->\n\n首先，\n```\nnpm uninstall hexo-renderer-marked\n```\n\n然后\n```\nhexo install hexo-renderer-markdown-it\nnpm install hexo-renderer-kramed --save\n```\n\n最后，新建$layout/$_$markdown/mathjax.ejs:$\n\n```ejs\n<script>\n    if (typeof MathJax === 'undefined') {\n      window.MathJax = {\n        loader: {\n          source: {\n            '[tex]/amsCd': '[tex]/amscd',\n            '[tex]/AMScd': '[tex]/amscd'\n          }\n        },\n        tex: {\n          inlineMath: {'[+]': [['$', '$']]},\n          tags: 'ams'\n        },\n        options: {\n          renderActions: {\n            findScript: [10, doc => {\n              document.querySelectorAll('script[type^=\"math/tex\"]').forEach(node => {\n                const display = !!node.type.match(/; *mode=display/);\n                const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);\n                const text = document.createTextNode('');\n                node.parentNode.replaceChild(text, node);\n                math.start = {node: text, delim: '', n: 0};\n                math.end = {node: text, delim: '', n: 0};\n                doc.math.push(math);\n              });\n            }, '', false],\n            insertedScript: [200, () => {\n              document.querySelectorAll('mjx-container').forEach(node => {\n                let target = node.parentNode;\n                if (target.nodeName.toLowerCase() === 'li') {\n                  target.parentNode.classList.add('has-jax');\n                }\n              });\n            }, '', false]\n          }\n        }\n      };\n      (function () {\n        var script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3.0/es5/tex-mml-chtml.js';\n        script.defer = true;\n        document.head.appendChild(script);\n      })();\n    } else {\n      MathJax.startup.document.state(0);\n      MathJax.texReset();\n      MathJax.typeset();\n    }\n  </script>\n```\n\n","slug":"hexo主题添加 mathjax","published":1,"updated":"2021-01-14T11:38:17.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjxqtmjm000ciwb19qhi13g4","content":"<p>$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$</p>\n<a id=\"more\"></a>\n\n<p>首先，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm uninstall hexo-renderer-marked<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo install hexo-renderer-markdown-it<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure>\n\n<p>最后，新建$layout/$_$markdown/mathjax.ejs:$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;script&gt;<br>    if (typeof MathJax &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;<br>      window.MathJax &#x3D; &#123;<br>        loader: &#123;<br>          source: &#123;<br>            &#39;[tex]&#x2F;amsCd&#39;: &#39;[tex]&#x2F;amscd&#39;,<br>            &#39;[tex]&#x2F;AMScd&#39;: &#39;[tex]&#x2F;amscd&#39;<br>          &#125;<br>        &#125;,<br>        tex: &#123;<br>          inlineMath: &#123;&#39;[+]&#39;: [[&#39;$&#39;, &#39;$&#39;]]&#125;,<br>          tags: &#39;ams&#39;<br>        &#125;,<br>        options: &#123;<br>          renderActions: &#123;<br>            findScript: [10, doc &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;script[type^&#x3D;&quot;math&#x2F;tex&quot;]&#39;).forEach(node &#x3D;&gt; &#123;<br>                const display &#x3D; !!node.type.match(&#x2F;; *mode&#x3D;display&#x2F;);<br>                const math &#x3D; new doc.options.MathItem(node.textContent, doc.inputJax[0], display);<br>                const text &#x3D; document.createTextNode(&#39;&#39;);<br>                node.parentNode.replaceChild(text, node);<br>                math.start &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                math.end &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                doc.math.push(math);<br>              &#125;);<br>            &#125;, &#39;&#39;, false],<br>            insertedScript: [200, () &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;mjx-container&#39;).forEach(node &#x3D;&gt; &#123;<br>                let target &#x3D; node.parentNode;<br>                if (target.nodeName.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;li&#39;) &#123;<br>                  target.parentNode.classList.add(&#39;has-jax&#39;);<br>                &#125;<br>              &#125;);<br>            &#125;, &#39;&#39;, false]<br>          &#125;<br>        &#125;<br>      &#125;;<br>      (function () &#123;<br>        var script &#x3D; document.createElement(&#39;script&#39;);<br>        script.src &#x3D; &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@3.0&#x2F;es5&#x2F;tex-mml-chtml.js&#39;;<br>        script.defer &#x3D; true;<br>        document.head.appendChild(script);<br>      &#125;)();<br>    &#125; else &#123;<br>      MathJax.startup.document.state(0);<br>      MathJax.texReset();<br>      MathJax.typeset();<br>    &#125;<br>  &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$</p>","more":"<p>首先，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm uninstall hexo-renderer-marked<br></code></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo install hexo-renderer-markdown-it<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure>\n\n<p>最后，新建$layout/$_$markdown/mathjax.ejs:$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;script&gt;<br>    if (typeof MathJax &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;<br>      window.MathJax &#x3D; &#123;<br>        loader: &#123;<br>          source: &#123;<br>            &#39;[tex]&#x2F;amsCd&#39;: &#39;[tex]&#x2F;amscd&#39;,<br>            &#39;[tex]&#x2F;AMScd&#39;: &#39;[tex]&#x2F;amscd&#39;<br>          &#125;<br>        &#125;,<br>        tex: &#123;<br>          inlineMath: &#123;&#39;[+]&#39;: [[&#39;$&#39;, &#39;$&#39;]]&#125;,<br>          tags: &#39;ams&#39;<br>        &#125;,<br>        options: &#123;<br>          renderActions: &#123;<br>            findScript: [10, doc &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;script[type^&#x3D;&quot;math&#x2F;tex&quot;]&#39;).forEach(node &#x3D;&gt; &#123;<br>                const display &#x3D; !!node.type.match(&#x2F;; *mode&#x3D;display&#x2F;);<br>                const math &#x3D; new doc.options.MathItem(node.textContent, doc.inputJax[0], display);<br>                const text &#x3D; document.createTextNode(&#39;&#39;);<br>                node.parentNode.replaceChild(text, node);<br>                math.start &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                math.end &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                doc.math.push(math);<br>              &#125;);<br>            &#125;, &#39;&#39;, false],<br>            insertedScript: [200, () &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;mjx-container&#39;).forEach(node &#x3D;&gt; &#123;<br>                let target &#x3D; node.parentNode;<br>                if (target.nodeName.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;li&#39;) &#123;<br>                  target.parentNode.classList.add(&#39;has-jax&#39;);<br>                &#125;<br>              &#125;);<br>            &#125;, &#39;&#39;, false]<br>          &#125;<br>        &#125;<br>      &#125;;<br>      (function () &#123;<br>        var script &#x3D; document.createElement(&#39;script&#39;);<br>        script.src &#x3D; &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@3.0&#x2F;es5&#x2F;tex-mml-chtml.js&#39;;<br>        script.defer &#x3D; true;<br>        document.head.appendChild(script);<br>      &#125;)();<br>    &#125; else &#123;<br>      MathJax.startup.document.state(0);<br>      MathJax.texReset();<br>      MathJax.typeset();<br>    &#125;<br>  &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>"},{"title":"小恐龙外挂","mathjax":true,"date":"2021-01-14T12:02:41.000Z","link_c":"Game","link_name":"Dinosaur","top":4000,"_content":"\nChrome://dino  外挂(/doge)\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n修改内容：\n>  1.修改障碍物\n>  >  (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;\n>  >  (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;\n>  2.进入无敌模式                ：Runner.instance_.gameOver = function(){};\n>  3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);","source":"_posts/小恐龙外挂.md","raw":"---\ntitle: 小恐龙外挂\nmathjax: true\ndate: 2021-01-14 20:02:41\nlink_c: Game\nlink_name: Dinosaur\ntop: 4000\ntags: Dino\ncategories: Game\n---\n\nChrome://dino  外挂(/doge)\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n修改内容：\n>  1.修改障碍物\n>  >  (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;\n>  >  (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;\n>  2.进入无敌模式                ：Runner.instance_.gameOver = function(){};\n>  3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);","slug":"小恐龙外挂","published":1,"updated":"2021-01-14T12:04:14.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjxqtmjm000diwb1ep5x9qhp","content":"<p>Chrome://dino  外挂(/doge)</p>\n<a id=\"more\"></a>\n\n<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>修改内容：</p>\n<blockquote>\n<p> 1.修改障碍物</p>\n<blockquote>\n<p> (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;<br> (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;<br> 2.进入无敌模式                ：Runner.instance_.gameOver = function(){};<br> 3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Chrome://dino  外挂(/doge)</p>","more":"<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>修改内容：</p>\n<blockquote>\n<p> 1.修改障碍物</p>\n<blockquote>\n<p> (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;<br> (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;<br> 2.进入无敌模式                ：Runner.instance_.gameOver = function(){};<br> 3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);</p>\n</blockquote>\n</blockquote>"},{"title":"从 0 开始制作 Hexo 博客主题","date":"2020-10-26T12:01:32.000Z","link_c":"Hexo","link_name":"Theme-Made-By-Myself","top":2002,"mathjax":true,"_content":"\n## 写在前面\n本文将会从零开始开发一个简单的博客主题。样式主要参考 `Hexo theme` 中的 `Noise` 主题。\n\n<!-- More -->\n\n开始之前你需要了解：\n- 模板引擎 ejs官网\n- CSS预处理器\n- Hexo 文档\n\n本文使用的模板引擎为 `ejs`，使用的 CSS 预处理器为 `stylus`。这也是 `hexo` 项目预装了的 `render` 插件，如果想使用其他模板引擎或者其他 `CSS` 预处理器，可以安装相对应的 `render` 插件。例如我的 `Even` 主题使用的是 `Swig` 与 `SCSS`。\n目录结构\n主题目录结构以自带的 `landscape` 主题为例：\n.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n我们在 themes 中新建 `theme-example` 文件夹，然后在 `theme-demo` 中按照 `landscape` 主题的目录结构新建 `languages`，`layout`，`scripts` 与 source 文件夹。\n## 创建布局模板\n在 `layout` 中创建 `index.ejs` 文件，首页将会使用该布局模板生成 HTML 文件。\n`layout/index.ejs:`\n```js\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello Word</h1>\n  </body>\n</html>\n```\n修改站点配置文件中的主题配置，使用我们刚刚创建的 `theme-example` 主题：\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n```\n## 运行\n`hexo clean`   清除`public`静态文件\n`hexo generate` 生成`public`静态文件\n`hexo server --debug` 以 `debug` 模式开启 `Hexo` 本地服务器预览，访问 http://localhost:4000/。\n\n![](http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg)\n\n## 写作\n在工作文件夹中执行这条命令来新建一篇文章，`title`即为文章的标题。\n```\nhexo new <title>　　\n```\n终端会返回一条信息，告诉你文章源文件存放在哪里：\n\n![](https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png)\n\n## 添加页面导航\n现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 `layout` 中创建共用的布局文件 `layout.ejs`， 同时创建 `_partial/head.ejs` 保存 HTML 的 `head` 以及创建 `_partial/header.ejs` 文件，编写页面导航部分。\n`layout/layout.ejs:`\n```js\n<!DOCTYPE html>\n<html>\n  <%- partial('_partial/head') %>\n  <body>\n    <%- partial('_partial/header') %>\n    <main class=\"main\">\n      <%- body %>\n    </main>\n  </body>\n</html>\n```\n`layout.ejs` 文件通过 `partial()` 函数来包含其他文件，使得我们能够更好的组织代码。详见 `Templates | Hexo`。\n`layout/_partial/head.ejs:`\n```js\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n</head>\n```\n这里使用了 `config` 变量，该变量包含的是站点配置（即站点根目录下 `_config.yml` 中的配置）。除此之外，`Hexo` 还提供了许多变量可在模板中使用，详见 `Variables | Hexo`。\n`layout/_partial/header.ejs:`\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <li class=\"menu-item\">\n        <a href=\"/\" class=\"menu-item-link\">Home</a>\n      </li>\n      <li class=\"menu-item\">\n        <a href=\"/archives\" class=\"menu-item-link\">Archive</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n```\n接着我们清空 `index.ejs` 中的内容，并添加 `<h2>Hello World</h2>`。在 `layout` 目录下的 `index.ejs` 会自动继承 `layout.ejs`，并将其中的内容填入 `<%- body %>` 的位置。我们将得到一个有导航菜单的 `Hello World` 页面。\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg)\n\n## 添加主题配置文件\n实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 `thmem-demo` 下新建主题的配置文件 `_config.yml`，在其中添加需要配置的字段。然后可以通过`theme`这个变量来拿到该配置文件中的配置。\n`theme-demo/_config.yml:`\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n```\n这样我们就可以在 `header.ejs` 中使用 `theme.menu` 获取到导航菜单的设置。将 `header.ejs` 修改为：\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%= name %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 `Github` 的链接：\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n```\n除此之外还可以添加其他需要的配置，例如 `RSS`，评论等等。\n## 添加首页文章列表\n接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 `Hexo` 提供了各种有用的变量，在这里将会使用到 `page` 这个变量。`page` 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看[这里](https://hexo.io/docs/variables.html#Page-Variables)。\n那么这里我们会使用 `page` 变量的 `posts` 属性拿到文章数据的集合。编辑 `index.ejs` 文件：\n```js\n<section class=\"posts\">\n  <% page.posts.each(function (post) { %>\n    <article class=\"post\">\n      <div class=\"post-title\">\n        <a class=\"post-title-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </div>\n      <div class=\"post-content\">\n        <%- post.content %>\n      </div>\n      <div class=\"post-meta\">\n        <span class=\"post-time\"><%- date(post.date, \"YYYY-MM-DD\") %></span>\n      </div>\n    </article>\n  <% }) %>\n</section>\n```\n从 `page.posts` 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 `date()` 函数，这是 `Hexo` 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 `Hexo` 的辅助函数。\n## 文章摘录\n由于首页显示文章内容时使用的是 `post.content`，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。\n`Hexo` 提供了 `excerpt` 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 `<!-- more -->` 标记。添加了这个标记之后，`post.excerpt` 将会获取到标记之前的内容。如果没有这个标记，那么 `post.excerpt` 会是空的。所以我们可以把首页文章内容部分的 `post.content` 替换成 `post.excerpt`。\n```js\n<div class=\"post-content\">\n  <%- post.excerpt %>\n</div>\n```\n## 添加页面样式\n到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 `source` 文件中创建一个 `css` 文件夹来存放样式文件。\n由于 `Hexo` 在新建项目的时候会安装 `hexo-renderer-stylus` 这个插件，所以我们无需其他步骤，只需要将样式文件放到 `css` 文件夹中。`Hexo` 在生成页面的时候会将 `source` 中的所有文件复制到生成的 `public` 文件中，并且在此之前会编译 `styl` 为 `css` 文件。\n在 `css` 文件夹中创建 `style.styl`，编写一些基础的样式，并把所有样式 `import` 到这个文件。所以最终编译之后只会有 `style.css` 一个文件。创建 `_partial/header.styl` 与 `_partial/post.style` 存放页面导航以及文章的样式，并且在 `style.styl` 中 `import` 这两个文件。\n`_partial/header.styl:`\n```css\n.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n```\n`_partial/post.styl:`\n```css\n.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n```\n`style.styl:`\n```css\nbody {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n```\n最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 `css():`\n`layout/_partial/head.ejs:`\n```js\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n  <%- css('css/style.css') %>\n</head>\n```\n至此，我们会看到站点的首页是这个样子的：\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg)\n\n## 添加分页\n在站点的 `source/_post/` 目录下存放的是我们的文章，现在我们把原本的 `hello-world.md` 复制黏贴 `10+` 次，再查看站点首页。会发现，首页只显示了 `10` 篇文章。\n首页显示的文章数量我们可以通过站点配置文件中的 `per_page` 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。\n新建 `_partial/paginator.ejs:`\n```js\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo; Prev\",\n      next_text: \"Next &raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n在 `index.ejs` 中添加这个文件的内容：\n```js\n...\n</section>\n<%- paginator('_partial/paginator') %>\n```\n这里我们使用到了另外的一个辅助函数 `paginator`，它能够帮助我们插入分页链接。\n添加文章详情页\n文章详情页对应的布局文件是 `post.ejs`，新建 `post.ejs:`\n```js\n<article class=\"post\">\n  <div class=\"post-title\">\n    <h2 class=\"title\"><%= page.title %></h2>\n  </div>\n   <div class=\"post-meta\">\n    <span class=\"post-time\"><%- date(page.date, \"YYYY-MM-DD\") %></span>\n  </div>\n  <div class=\"post-content\">\n    <%- page.content %>\n  </div>\n</article>\n```\n由于这里是文章的模板，所以变量 `page` 表示的是文章的数据，而不是首页的文章数据集合。\n## 添加归档页\n创建归档页使用的模板文件 `archive.ejs:`\n```js\n<section class=\"archive\">\n  <ul class=\"post-archive\">\n    <% page.posts.each(function (post) { %>\n      <li class=\"post-item\">\n        <span class=\"post-date\"><%= date(post.date, \"YYYY-MM-DD\") %></span>\n        <a class=\"post-title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </li>\n    <% }) %>\n  </ul>\n</section>\n<%- partial('_partial/paginator') %>\n```\n其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：\n`css/_partial/archive.styl:`\n```css\n.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n```\n## 国际化\n还记得我们一开始创建的 `languages` 文件夹吗？没错，它是用来添加多种语言，用于 `i18n` 的。站点的语言设置为站点配置文件中的 `language`。\n当该字段为空时，默认使用的是 `languages/default.yml` 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：\n```yml\nMenu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n```\n目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 `header.ejs` 与 `paginator.ejs` 这两个文件：\n`_partial/header.ejs`\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%- __('Menu.' + name) %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n`_partial/paginator.ejs:`\n```js\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：\n`languages/zh-CN.yml`\n```yml\nMenu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n```\n然后我们将站点配置文件中的 `language` 字段修改为 `zh-CN`（与 `zh-CN.yml` 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。\n## hexo函数\n```js\n<%- __('Menu.' + name) %>\n```\n__下划线函数在 `hexo` 变量 可以查看 `Lodash` 函数，专门用于`json`取值\n最后总结\n如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 `Hexo` 主题有了一定的了解。其实说白了，`Hexo` 就是把那些 `Markdown` 文件按照不同的布局模板，填上对应的数据生成 `HTML` 页面，复制 `source` 中的到生成的 `public` 文件夹中，中间过程会把需要编译的 `stylus/less/sass` 等文件编译。\n本文并没有提及有关页面 `JavaScript` 的部分，实际上与写 `CSS` 样式相同。在 `source/js` 中写 `JavaScript` 脚本，然后在模板中引入即可。\n感谢阅读，希望对你有所帮助。","source":"_posts/从 0 开始制作 Hexo 博客主题.md","raw":"---\ntitle: '从 0 开始制作 Hexo 博客主题'\ndate: 2020-10-26 20:01:32\nlink_c: Hexo\nlink_name: Theme-Made-By-Myself\ntop: 2002\nmathjax: true\ntags: Hexo\ncategories: Hexo\n---\n\n## 写在前面\n本文将会从零开始开发一个简单的博客主题。样式主要参考 `Hexo theme` 中的 `Noise` 主题。\n\n<!-- More -->\n\n开始之前你需要了解：\n- 模板引擎 ejs官网\n- CSS预处理器\n- Hexo 文档\n\n本文使用的模板引擎为 `ejs`，使用的 CSS 预处理器为 `stylus`。这也是 `hexo` 项目预装了的 `render` 插件，如果想使用其他模板引擎或者其他 `CSS` 预处理器，可以安装相对应的 `render` 插件。例如我的 `Even` 主题使用的是 `Swig` 与 `SCSS`。\n目录结构\n主题目录结构以自带的 `landscape` 主题为例：\n.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n我们在 themes 中新建 `theme-example` 文件夹，然后在 `theme-demo` 中按照 `landscape` 主题的目录结构新建 `languages`，`layout`，`scripts` 与 source 文件夹。\n## 创建布局模板\n在 `layout` 中创建 `index.ejs` 文件，首页将会使用该布局模板生成 HTML 文件。\n`layout/index.ejs:`\n```js\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello Word</h1>\n  </body>\n</html>\n```\n修改站点配置文件中的主题配置，使用我们刚刚创建的 `theme-example` 主题：\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n```\n## 运行\n`hexo clean`   清除`public`静态文件\n`hexo generate` 生成`public`静态文件\n`hexo server --debug` 以 `debug` 模式开启 `Hexo` 本地服务器预览，访问 http://localhost:4000/。\n\n![](http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg)\n\n## 写作\n在工作文件夹中执行这条命令来新建一篇文章，`title`即为文章的标题。\n```\nhexo new <title>　　\n```\n终端会返回一条信息，告诉你文章源文件存放在哪里：\n\n![](https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png)\n\n## 添加页面导航\n现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 `layout` 中创建共用的布局文件 `layout.ejs`， 同时创建 `_partial/head.ejs` 保存 HTML 的 `head` 以及创建 `_partial/header.ejs` 文件，编写页面导航部分。\n`layout/layout.ejs:`\n```js\n<!DOCTYPE html>\n<html>\n  <%- partial('_partial/head') %>\n  <body>\n    <%- partial('_partial/header') %>\n    <main class=\"main\">\n      <%- body %>\n    </main>\n  </body>\n</html>\n```\n`layout.ejs` 文件通过 `partial()` 函数来包含其他文件，使得我们能够更好的组织代码。详见 `Templates | Hexo`。\n`layout/_partial/head.ejs:`\n```js\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n</head>\n```\n这里使用了 `config` 变量，该变量包含的是站点配置（即站点根目录下 `_config.yml` 中的配置）。除此之外，`Hexo` 还提供了许多变量可在模板中使用，详见 `Variables | Hexo`。\n`layout/_partial/header.ejs:`\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <li class=\"menu-item\">\n        <a href=\"/\" class=\"menu-item-link\">Home</a>\n      </li>\n      <li class=\"menu-item\">\n        <a href=\"/archives\" class=\"menu-item-link\">Archive</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n```\n接着我们清空 `index.ejs` 中的内容，并添加 `<h2>Hello World</h2>`。在 `layout` 目录下的 `index.ejs` 会自动继承 `layout.ejs`，并将其中的内容填入 `<%- body %>` 的位置。我们将得到一个有导航菜单的 `Hello World` 页面。\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg)\n\n## 添加主题配置文件\n实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 `thmem-demo` 下新建主题的配置文件 `_config.yml`，在其中添加需要配置的字段。然后可以通过`theme`这个变量来拿到该配置文件中的配置。\n`theme-demo/_config.yml:`\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n```\n这样我们就可以在 `header.ejs` 中使用 `theme.menu` 获取到导航菜单的设置。将 `header.ejs` 修改为：\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%= name %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 `Github` 的链接：\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n```\n除此之外还可以添加其他需要的配置，例如 `RSS`，评论等等。\n## 添加首页文章列表\n接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 `Hexo` 提供了各种有用的变量，在这里将会使用到 `page` 这个变量。`page` 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看[这里](https://hexo.io/docs/variables.html#Page-Variables)。\n那么这里我们会使用 `page` 变量的 `posts` 属性拿到文章数据的集合。编辑 `index.ejs` 文件：\n```js\n<section class=\"posts\">\n  <% page.posts.each(function (post) { %>\n    <article class=\"post\">\n      <div class=\"post-title\">\n        <a class=\"post-title-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </div>\n      <div class=\"post-content\">\n        <%- post.content %>\n      </div>\n      <div class=\"post-meta\">\n        <span class=\"post-time\"><%- date(post.date, \"YYYY-MM-DD\") %></span>\n      </div>\n    </article>\n  <% }) %>\n</section>\n```\n从 `page.posts` 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 `date()` 函数，这是 `Hexo` 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 `Hexo` 的辅助函数。\n## 文章摘录\n由于首页显示文章内容时使用的是 `post.content`，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。\n`Hexo` 提供了 `excerpt` 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 `<!-- more -->` 标记。添加了这个标记之后，`post.excerpt` 将会获取到标记之前的内容。如果没有这个标记，那么 `post.excerpt` 会是空的。所以我们可以把首页文章内容部分的 `post.content` 替换成 `post.excerpt`。\n```js\n<div class=\"post-content\">\n  <%- post.excerpt %>\n</div>\n```\n## 添加页面样式\n到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 `source` 文件中创建一个 `css` 文件夹来存放样式文件。\n由于 `Hexo` 在新建项目的时候会安装 `hexo-renderer-stylus` 这个插件，所以我们无需其他步骤，只需要将样式文件放到 `css` 文件夹中。`Hexo` 在生成页面的时候会将 `source` 中的所有文件复制到生成的 `public` 文件中，并且在此之前会编译 `styl` 为 `css` 文件。\n在 `css` 文件夹中创建 `style.styl`，编写一些基础的样式，并把所有样式 `import` 到这个文件。所以最终编译之后只会有 `style.css` 一个文件。创建 `_partial/header.styl` 与 `_partial/post.style` 存放页面导航以及文章的样式，并且在 `style.styl` 中 `import` 这两个文件。\n`_partial/header.styl:`\n```css\n.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n```\n`_partial/post.styl:`\n```css\n.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n```\n`style.styl:`\n```css\nbody {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n```\n最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 `css():`\n`layout/_partial/head.ejs:`\n```js\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n  <%- css('css/style.css') %>\n</head>\n```\n至此，我们会看到站点的首页是这个样子的：\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg)\n\n## 添加分页\n在站点的 `source/_post/` 目录下存放的是我们的文章，现在我们把原本的 `hello-world.md` 复制黏贴 `10+` 次，再查看站点首页。会发现，首页只显示了 `10` 篇文章。\n首页显示的文章数量我们可以通过站点配置文件中的 `per_page` 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。\n新建 `_partial/paginator.ejs:`\n```js\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo; Prev\",\n      next_text: \"Next &raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n在 `index.ejs` 中添加这个文件的内容：\n```js\n...\n</section>\n<%- paginator('_partial/paginator') %>\n```\n这里我们使用到了另外的一个辅助函数 `paginator`，它能够帮助我们插入分页链接。\n添加文章详情页\n文章详情页对应的布局文件是 `post.ejs`，新建 `post.ejs:`\n```js\n<article class=\"post\">\n  <div class=\"post-title\">\n    <h2 class=\"title\"><%= page.title %></h2>\n  </div>\n   <div class=\"post-meta\">\n    <span class=\"post-time\"><%- date(page.date, \"YYYY-MM-DD\") %></span>\n  </div>\n  <div class=\"post-content\">\n    <%- page.content %>\n  </div>\n</article>\n```\n由于这里是文章的模板，所以变量 `page` 表示的是文章的数据，而不是首页的文章数据集合。\n## 添加归档页\n创建归档页使用的模板文件 `archive.ejs:`\n```js\n<section class=\"archive\">\n  <ul class=\"post-archive\">\n    <% page.posts.each(function (post) { %>\n      <li class=\"post-item\">\n        <span class=\"post-date\"><%= date(post.date, \"YYYY-MM-DD\") %></span>\n        <a class=\"post-title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </li>\n    <% }) %>\n  </ul>\n</section>\n<%- partial('_partial/paginator') %>\n```\n其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：\n`css/_partial/archive.styl:`\n```css\n.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n```\n## 国际化\n还记得我们一开始创建的 `languages` 文件夹吗？没错，它是用来添加多种语言，用于 `i18n` 的。站点的语言设置为站点配置文件中的 `language`。\n当该字段为空时，默认使用的是 `languages/default.yml` 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：\n```yml\nMenu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n```\n目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 `header.ejs` 与 `paginator.ejs` 这两个文件：\n`_partial/header.ejs`\n```js\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%- __('Menu.' + name) %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n`_partial/paginator.ejs:`\n```js\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：\n`languages/zh-CN.yml`\n```yml\nMenu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n```\n然后我们将站点配置文件中的 `language` 字段修改为 `zh-CN`（与 `zh-CN.yml` 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。\n## hexo函数\n```js\n<%- __('Menu.' + name) %>\n```\n__下划线函数在 `hexo` 变量 可以查看 `Lodash` 函数，专门用于`json`取值\n最后总结\n如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 `Hexo` 主题有了一定的了解。其实说白了，`Hexo` 就是把那些 `Markdown` 文件按照不同的布局模板，填上对应的数据生成 `HTML` 页面，复制 `source` 中的到生成的 `public` 文件夹中，中间过程会把需要编译的 `stylus/less/sass` 等文件编译。\n本文并没有提及有关页面 `JavaScript` 的部分，实际上与写 `CSS` 样式相同。在 `source/js` 中写 `JavaScript` 脚本，然后在模板中引入即可。\n感谢阅读，希望对你有所帮助。","slug":"从 0 开始制作 Hexo 博客主题","published":1,"updated":"2021-01-14T11:38:22.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjxqtmjn000fiwb1frts99gy","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <code>Hexo theme</code> 中的 <code>Noise</code> 主题。</p>\n<a id=\"more\"></a>\n\n<p>开始之前你需要了解：</p>\n<ul>\n<li>模板引擎 ejs官网</li>\n<li>CSS预处理器</li>\n<li>Hexo 文档</li>\n</ul>\n<p>本文使用的模板引擎为 <code>ejs</code>，使用的 CSS 预处理器为 <code>stylus</code>。这也是 <code>hexo</code> 项目预装了的 <code>render</code> 插件，如果想使用其他模板引擎或者其他 <code>CSS</code> 预处理器，可以安装相对应的 <code>render</code> 插件。例如我的 <code>Even</code> 主题使用的是 <code>Swig</code> 与 <code>SCSS</code>。<br>目录结构<br>主题目录结构以自带的 <code>landscape</code> 主题为例：<br>.<br>├── languages  语言文件，用于国际化<br>├── layout     页面模板文件<br>├── scripts    Hexo 脚本<br>└── source     主题资源文件，包括页面样式，脚本，字体等<br>我们在 themes 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-demo</code> 中按照 <code>landscape</code> 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 source 文件夹。</p>\n<h2 id=\"创建布局模板\"><a href=\"#创建布局模板\" class=\"headerlink\" title=\"创建布局模板\"></a>创建布局模板</h2><p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。<br><code>layout/index.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>    &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>    &lt;title&gt;Home&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Hello Word&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">theme-example</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p><code>hexo clean</code>   清除<code>public</code>静态文件<br><code>hexo generate</code> 生成<code>public</code>静态文件<br><code>hexo server --debug</code> 以 <code>debug</code> 模式开启 <code>Hexo</code> 本地服务器预览，访问 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg\"></p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>在工作文件夹中执行这条命令来新建一篇文章，<code>title</code>即为文章的标题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo new &lt;title&gt;　　<br></code></pre></td></tr></table></figure>\n<p>终端会返回一条信息，告诉你文章源文件存放在哪里：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png\"></p>\n<h2 id=\"添加页面导航\"><a href=\"#添加页面导航\" class=\"headerlink\" title=\"添加页面导航\"></a>添加页面导航</h2><p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 <code>head</code> 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。<br><code>layout/layout.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/head&#x27;</span>) %&gt;<br>  &lt;body&gt;<br>    &lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/header&#x27;</span>) %&gt;<br>    &lt;main <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;<br>      &lt;%- body %&gt;<br>    &lt;/main&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <code>Templates | Hexo</code>。<br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;head&gt;<br>  &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>  &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>  &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure>\n<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，<code>Hexo</code> 还提供了许多变量可在模板中使用，详见 <code>Variables | Hexo</code>。<br><code>layout/_partial/header.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>        &lt;a href=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;Home&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>        &lt;a href=<span class=\"hljs-string\">&quot;/archives&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;Archive&lt;/a&gt;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&lt;h2&gt;Hello World&lt;/h2&gt;</code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&lt;%- body %&gt;</code> 的位置。我们将得到一个有导航菜单的 <code>Hello World</code> 页面。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg\"></p>\n<h2 id=\"添加主题配置文件\"><a href=\"#添加主题配置文件\" class=\"headerlink\" title=\"添加主题配置文件\"></a>添加主题配置文件</h2><p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过<code>theme</code>这个变量来拿到该配置文件中的配置。<br><code>theme-demo/_config.yml:</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br></code></pre></td></tr></table></figure>\n<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;% <span class=\"hljs-keyword\">for</span> (name <span class=\"hljs-keyword\">in</span> theme.menu) &#123; %&gt;<br>        &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>          &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;&lt;%= name %&gt;&lt;/a&gt;<br>        &lt;/li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 <code>Github</code> 的链接：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">https://github.com/ahonn</span><br></code></pre></td></tr></table></figure>\n<p>除此之外还可以添加其他需要的配置，例如 <code>RSS</code>，评论等等。</p>\n<h2 id=\"添加首页文章列表\"><a href=\"#添加首页文章列表\" class=\"headerlink\" title=\"添加首页文章列表\"></a>添加首页文章列表</h2><p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 <code>Hexo</code> 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href=\"https://hexo.io/docs/variables.html#Page-Variables\">这里</a>。<br>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;posts&quot;</span>&gt;<br>  &lt;% page.posts.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">post</span>) </span>&#123; %&gt;<br>    &lt;article <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;<br>        &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title-link&quot;</span> href=<span class=\"hljs-string\">&quot;&lt;%- url_for(post.path) %&gt;&quot;</span>&gt;&lt;%= post.title %&gt;&lt;/a&gt;<br>      &lt;/div&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>        &lt;%- post.content %&gt;<br>      &lt;/div&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-meta&quot;</span>&gt;<br>        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-time&quot;</span>&gt;&lt;%- date(post.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>      &lt;/div&gt;<br>    &lt;/article&gt;<br>  &lt;% &#125;) %&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure>\n<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 <code>Hexo</code> 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 <code>Hexo</code> 的辅助函数。</p>\n<h2 id=\"文章摘录\"><a href=\"#文章摘录\" class=\"headerlink\" title=\"文章摘录\"></a>文章摘录</h2><p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。<br><code>Hexo</code> 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&lt;!-- more --&gt;</code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>  &lt;%- post.excerpt %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加页面样式\"><a href=\"#添加页面样式\" class=\"headerlink\" title=\"添加页面样式\"></a>添加页面样式</h2><p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。<br>由于 <code>Hexo</code> 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。<code>Hexo</code> 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 <code>styl</code> 为 <code>css</code> 文件。<br>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.style</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。<br><code>_partial/header.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.header</span> &#123;<br>  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span><br>  display: flex<br>  align-items: baseline<br>  justify-content: space-between<br><br>  .blog-title .logo &#123;<br>    color: <span class=\"hljs-number\">#AAA</span>;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2em</span>;<br>    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&quot;Comic Sans MS&quot;</span>,cursive,LiSu,sans-serif;<br>    <span class=\"hljs-attribute\">text-decoration</span>: none;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br><br>    .menu-item &#123;<br>      <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>      <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>    &#125;<br><br>    <span class=\"hljs-selector-class\">.menu-item-link</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#AAA</span>;<br>      <span class=\"hljs-attribute\">text-decoration</span>: none;<br><br>      &amp;:hover &#123;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/post.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.post</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.posts</span>  &#123;<br>  <span class=\"hljs-attribute\">.post</span>:first-child &#123;<br>    margin-top: <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.5em</span>;<br><br>    .post-title-link &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-content</span> &#123;<br>    a &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-meta</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#BABABA</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>style.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F2F2F2</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.25rem</span>;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">960px</span>;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>&#125;<br><br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/header&quot;</span>;<br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/post&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <code>css():</code><br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;head&gt;<br>  &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>  &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>  &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;<br>  &lt;%- css(<span class=\"hljs-string\">&#x27;css/style.css&#x27;</span>) %&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure>\n<p>至此，我们会看到站点的首页是这个样子的：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg\"></p>\n<h2 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h2><p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 <code>10+</code> 次，再查看站点首页。会发现，首页只显示了 <code>10</code> 篇文章。<br>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。<br>新建 <code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;% <span class=\"hljs-keyword\">if</span> (page.total &gt; <span class=\"hljs-number\">1</span>)&#123; %&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;page-nav&quot;</span>&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: <span class=\"hljs-string\">&quot;&amp;laquo; Prev&quot;</span>,<br>      next_text: <span class=\"hljs-string\">&quot;Next &amp;raquo;&quot;</span><br>    &#125;) %&gt;<br>  &lt;/nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">...<br>&lt;/section&gt;<br>&lt;%- paginator(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>这里我们使用到了另外的一个辅助函数 <code>paginator</code>，它能够帮助我们插入分页链接。<br>添加文章详情页<br>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;article <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;<br>    &lt;h2 <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;&lt;%= page.title %&gt;&lt;/h2&gt;<br>  &lt;/div&gt;<br>   &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-meta&quot;</span>&gt;<br>    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-time&quot;</span>&gt;&lt;%- date(page.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>  &lt;/div&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;/div&gt;<br>&lt;/article&gt;<br></code></pre></td></tr></table></figure>\n<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>\n<h2 id=\"添加归档页\"><a href=\"#添加归档页\" class=\"headerlink\" title=\"添加归档页\"></a>添加归档页</h2><p>创建归档页使用的模板文件 <code>archive.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;archive&quot;</span>&gt;<br>  &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-archive&quot;</span>&gt;<br>    &lt;% page.posts.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">post</span>) </span>&#123; %&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-item&quot;</span>&gt;<br>        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-date&quot;</span>&gt;&lt;%= date(post.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>        &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span> href=<span class=\"hljs-string\">&quot;&lt;%- url_for(post.path) %&gt;&quot;</span>&gt;&lt;%= post.title %&gt;&lt;/a&gt;<br>      &lt;/li&gt;<br>    &lt;% &#125;) %&gt;<br>  &lt;/ul&gt;<br>&lt;/section&gt;<br>&lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：<br><code>css/_partial/archive.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.archive</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br><br>  .post-archive &#123;<br>    <span class=\"hljs-selector-tag\">list-style</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    <span class=\"hljs-selector-tag\">padding</span>: 0;<br><br>    <span class=\"hljs-selector-class\">.post-item</span> &#123;<br>      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;<br><br>      .post-date &#123;<br>        <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>        <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#BABABA</span>;<br>      &#125;<br><br>      <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#368CCB</span>;<br>        <span class=\"hljs-attribute\">text-decoration</span>: none;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 <code>i18n</code> 的。站点的语言设置为站点配置文件中的 <code>language</code>。<br>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">Home</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">Archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">Github</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">Prev</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">Next</span><br></code></pre></td></tr></table></figure>\n<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：<br><code>_partial/header.ejs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;% <span class=\"hljs-keyword\">for</span> (name <span class=\"hljs-keyword\">in</span> theme.menu) &#123; %&gt;<br>        &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>          &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;&lt;%- __(<span class=\"hljs-string\">&#x27;Menu.&#x27;</span> + name) %&gt;&lt;/a&gt;<br>        &lt;/li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;% <span class=\"hljs-keyword\">if</span> (page.total &gt; <span class=\"hljs-number\">1</span>)&#123; %&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;page-nav&quot;</span>&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: <span class=\"hljs-string\">&quot;&amp;laquo;&quot;</span> + __(<span class=\"hljs-string\">&#x27;Paginator.Prev&#x27;</span>),<br>      next_text: __(<span class=\"hljs-string\">&#x27;Paginator.Next&#x27;</span>) + <span class=\"hljs-string\">&quot;&amp;raquo;&quot;</span><br>    &#125;) %&gt;<br>  &lt;/nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：<br><code>languages/zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">首页</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">归档</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">交友</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">上一页</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">下一页</span><br></code></pre></td></tr></table></figure>\n<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>\n<h2 id=\"hexo函数\"><a href=\"#hexo函数\" class=\"headerlink\" title=\"hexo函数\"></a>hexo函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;%- __(<span class=\"hljs-string\">&#x27;Menu.&#x27;</span> + name) %&gt;<br></code></pre></td></tr></table></figure>\n<p>__下划线函数在 <code>hexo</code> 变量 可以查看 <code>Lodash</code> 函数，专门用于<code>json</code>取值<br>最后总结<br>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 <code>Hexo</code> 主题有了一定的了解。其实说白了，<code>Hexo</code> 就是把那些 <code>Markdown</code> 文件按照不同的布局模板，填上对应的数据生成 <code>HTML</code> 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 <code>stylus/less/sass</code> 等文件编译。<br>本文并没有提及有关页面 <code>JavaScript</code> 的部分，实际上与写 <code>CSS</code> 样式相同。在 <code>source/js</code> 中写 <code>JavaScript</code> 脚本，然后在模板中引入即可。<br>感谢阅读，希望对你有所帮助。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <code>Hexo theme</code> 中的 <code>Noise</code> 主题。</p>","more":"<p>开始之前你需要了解：</p>\n<ul>\n<li>模板引擎 ejs官网</li>\n<li>CSS预处理器</li>\n<li>Hexo 文档</li>\n</ul>\n<p>本文使用的模板引擎为 <code>ejs</code>，使用的 CSS 预处理器为 <code>stylus</code>。这也是 <code>hexo</code> 项目预装了的 <code>render</code> 插件，如果想使用其他模板引擎或者其他 <code>CSS</code> 预处理器，可以安装相对应的 <code>render</code> 插件。例如我的 <code>Even</code> 主题使用的是 <code>Swig</code> 与 <code>SCSS</code>。<br>目录结构<br>主题目录结构以自带的 <code>landscape</code> 主题为例：<br>.<br>├── languages  语言文件，用于国际化<br>├── layout     页面模板文件<br>├── scripts    Hexo 脚本<br>└── source     主题资源文件，包括页面样式，脚本，字体等<br>我们在 themes 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-demo</code> 中按照 <code>landscape</code> 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 source 文件夹。</p>\n<h2 id=\"创建布局模板\"><a href=\"#创建布局模板\" class=\"headerlink\" title=\"创建布局模板\"></a>创建布局模板</h2><p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。<br><code>layout/index.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>    &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>    &lt;title&gt;Home&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Hello Word&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">theme-example</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p><code>hexo clean</code>   清除<code>public</code>静态文件<br><code>hexo generate</code> 生成<code>public</code>静态文件<br><code>hexo server --debug</code> 以 <code>debug</code> 模式开启 <code>Hexo</code> 本地服务器预览，访问 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg\"></p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>在工作文件夹中执行这条命令来新建一篇文章，<code>title</code>即为文章的标题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo new &lt;title&gt;　　<br></code></pre></td></tr></table></figure>\n<p>终端会返回一条信息，告诉你文章源文件存放在哪里：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png\"></p>\n<h2 id=\"添加页面导航\"><a href=\"#添加页面导航\" class=\"headerlink\" title=\"添加页面导航\"></a>添加页面导航</h2><p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 <code>head</code> 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。<br><code>layout/layout.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/head&#x27;</span>) %&gt;<br>  &lt;body&gt;<br>    &lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/header&#x27;</span>) %&gt;<br>    &lt;main <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;<br>      &lt;%- body %&gt;<br>    &lt;/main&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <code>Templates | Hexo</code>。<br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;head&gt;<br>  &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>  &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>  &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure>\n<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，<code>Hexo</code> 还提供了许多变量可在模板中使用，详见 <code>Variables | Hexo</code>。<br><code>layout/_partial/header.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>        &lt;a href=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;Home&lt;/a&gt;<br>      &lt;/li&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>        &lt;a href=<span class=\"hljs-string\">&quot;/archives&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;Archive&lt;/a&gt;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&lt;h2&gt;Hello World&lt;/h2&gt;</code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&lt;%- body %&gt;</code> 的位置。我们将得到一个有导航菜单的 <code>Hello World</code> 页面。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg\"></p>\n<h2 id=\"添加主题配置文件\"><a href=\"#添加主题配置文件\" class=\"headerlink\" title=\"添加主题配置文件\"></a>添加主题配置文件</h2><p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过<code>theme</code>这个变量来拿到该配置文件中的配置。<br><code>theme-demo/_config.yml:</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br></code></pre></td></tr></table></figure>\n<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;% <span class=\"hljs-keyword\">for</span> (name <span class=\"hljs-keyword\">in</span> theme.menu) &#123; %&gt;<br>        &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>          &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;&lt;%= name %&gt;&lt;/a&gt;<br>        &lt;/li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 <code>Github</code> 的链接：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">https://github.com/ahonn</span><br></code></pre></td></tr></table></figure>\n<p>除此之外还可以添加其他需要的配置，例如 <code>RSS</code>，评论等等。</p>\n<h2 id=\"添加首页文章列表\"><a href=\"#添加首页文章列表\" class=\"headerlink\" title=\"添加首页文章列表\"></a>添加首页文章列表</h2><p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 <code>Hexo</code> 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href=\"https://hexo.io/docs/variables.html#Page-Variables\">这里</a>。<br>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;posts&quot;</span>&gt;<br>  &lt;% page.posts.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">post</span>) </span>&#123; %&gt;<br>    &lt;article <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;<br>        &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title-link&quot;</span> href=<span class=\"hljs-string\">&quot;&lt;%- url_for(post.path) %&gt;&quot;</span>&gt;&lt;%= post.title %&gt;&lt;/a&gt;<br>      &lt;/div&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>        &lt;%- post.content %&gt;<br>      &lt;/div&gt;<br>      &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-meta&quot;</span>&gt;<br>        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-time&quot;</span>&gt;&lt;%- date(post.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>      &lt;/div&gt;<br>    &lt;/article&gt;<br>  &lt;% &#125;) %&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure>\n<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 <code>Hexo</code> 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 <code>Hexo</code> 的辅助函数。</p>\n<h2 id=\"文章摘录\"><a href=\"#文章摘录\" class=\"headerlink\" title=\"文章摘录\"></a>文章摘录</h2><p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。<br><code>Hexo</code> 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&lt;!-- more --&gt;</code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>  &lt;%- post.excerpt %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加页面样式\"><a href=\"#添加页面样式\" class=\"headerlink\" title=\"添加页面样式\"></a>添加页面样式</h2><p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。<br>由于 <code>Hexo</code> 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。<code>Hexo</code> 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 <code>styl</code> 为 <code>css</code> 文件。<br>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.style</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。<br><code>_partial/header.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.header</span> &#123;<br>  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span><br>  display: flex<br>  align-items: baseline<br>  justify-content: space-between<br><br>  .blog-title .logo &#123;<br>    color: <span class=\"hljs-number\">#AAA</span>;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2em</span>;<br>    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&quot;Comic Sans MS&quot;</span>,cursive,LiSu,sans-serif;<br>    <span class=\"hljs-attribute\">text-decoration</span>: none;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br><br>    .menu-item &#123;<br>      <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>      <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>    &#125;<br><br>    <span class=\"hljs-selector-class\">.menu-item-link</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#AAA</span>;<br>      <span class=\"hljs-attribute\">text-decoration</span>: none;<br><br>      &amp;:hover &#123;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/post.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.post</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.posts</span>  &#123;<br>  <span class=\"hljs-attribute\">.post</span>:first-child &#123;<br>    margin-top: <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.5em</span>;<br><br>    .post-title-link &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-content</span> &#123;<br>    a &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-meta</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#BABABA</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>style.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F2F2F2</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.25rem</span>;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">960px</span>;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>&#125;<br><br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/header&quot;</span>;<br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/post&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <code>css():</code><br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;head&gt;<br>  &lt;meta http-equiv=<span class=\"hljs-string\">&quot;content-type&quot;</span> content=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>  &lt;meta content=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span> name=<span class=\"hljs-string\">&quot;viewport&quot;</span>&gt;<br>  &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;<br>  &lt;%- css(<span class=\"hljs-string\">&#x27;css/style.css&#x27;</span>) %&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure>\n<p>至此，我们会看到站点的首页是这个样子的：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg\"></p>\n<h2 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h2><p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 <code>10+</code> 次，再查看站点首页。会发现，首页只显示了 <code>10</code> 篇文章。<br>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。<br>新建 <code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;% <span class=\"hljs-keyword\">if</span> (page.total &gt; <span class=\"hljs-number\">1</span>)&#123; %&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;page-nav&quot;</span>&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: <span class=\"hljs-string\">&quot;&amp;laquo; Prev&quot;</span>,<br>      next_text: <span class=\"hljs-string\">&quot;Next &amp;raquo;&quot;</span><br>    &#125;) %&gt;<br>  &lt;/nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">...<br>&lt;/section&gt;<br>&lt;%- paginator(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>这里我们使用到了另外的一个辅助函数 <code>paginator</code>，它能够帮助我们插入分页链接。<br>添加文章详情页<br>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;article <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;<br>    &lt;h2 <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;&lt;%= page.title %&gt;&lt;/h2&gt;<br>  &lt;/div&gt;<br>   &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-meta&quot;</span>&gt;<br>    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-time&quot;</span>&gt;&lt;%- date(page.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>  &lt;/div&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;/div&gt;<br>&lt;/article&gt;<br></code></pre></td></tr></table></figure>\n<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>\n<h2 id=\"添加归档页\"><a href=\"#添加归档页\" class=\"headerlink\" title=\"添加归档页\"></a>添加归档页</h2><p>创建归档页使用的模板文件 <code>archive.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;archive&quot;</span>&gt;<br>  &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-archive&quot;</span>&gt;<br>    &lt;% page.posts.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">post</span>) </span>&#123; %&gt;<br>      &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-item&quot;</span>&gt;<br>        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-date&quot;</span>&gt;&lt;%= date(post.date, <span class=\"hljs-string\">&quot;YYYY-MM-DD&quot;</span>) %&gt;&lt;/span&gt;<br>        &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;post-title&quot;</span> href=<span class=\"hljs-string\">&quot;&lt;%- url_for(post.path) %&gt;&quot;</span>&gt;&lt;%= post.title %&gt;&lt;/a&gt;<br>      &lt;/li&gt;<br>    &lt;% &#125;) %&gt;<br>  &lt;/ul&gt;<br>&lt;/section&gt;<br>&lt;%- partial(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：<br><code>css/_partial/archive.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.archive</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br><br>  .post-archive &#123;<br>    <span class=\"hljs-selector-tag\">list-style</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    <span class=\"hljs-selector-tag\">padding</span>: 0;<br><br>    <span class=\"hljs-selector-class\">.post-item</span> &#123;<br>      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;<br><br>      .post-date &#123;<br>        <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>        <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#BABABA</span>;<br>      &#125;<br><br>      <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#368CCB</span>;<br>        <span class=\"hljs-attribute\">text-decoration</span>: none;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 <code>i18n</code> 的。站点的语言设置为站点配置文件中的 <code>language</code>。<br>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">Home</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">Archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">Github</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">Prev</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">Next</span><br></code></pre></td></tr></table></figure>\n<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：<br><code>_partial/header.ejs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;header <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-title&quot;</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;logo&quot;</span>&gt;&lt;%= config.title %&gt;&lt;/a&gt;<br>  &lt;/div&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;navbar&quot;</span>&gt;<br>    &lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;<br>      &lt;% <span class=\"hljs-keyword\">for</span> (name <span class=\"hljs-keyword\">in</span> theme.menu) &#123; %&gt;<br>        &lt;li <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item&quot;</span>&gt;<br>          &lt;a href=<span class=\"hljs-string\">&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;menu-item-link&quot;</span>&gt;&lt;%- __(<span class=\"hljs-string\">&#x27;Menu.&#x27;</span> + name) %&gt;&lt;/a&gt;<br>        &lt;/li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;/ul&gt;<br>  &lt;/nav&gt;<br>&lt;/header&gt;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;% <span class=\"hljs-keyword\">if</span> (page.total &gt; <span class=\"hljs-number\">1</span>)&#123; %&gt;<br>  &lt;nav <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;page-nav&quot;</span>&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: <span class=\"hljs-string\">&quot;&amp;laquo;&quot;</span> + __(<span class=\"hljs-string\">&#x27;Paginator.Prev&#x27;</span>),<br>      next_text: __(<span class=\"hljs-string\">&#x27;Paginator.Next&#x27;</span>) + <span class=\"hljs-string\">&quot;&amp;raquo;&quot;</span><br>    &#125;) %&gt;<br>  &lt;/nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：<br><code>languages/zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">首页</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">归档</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">交友</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">上一页</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">下一页</span><br></code></pre></td></tr></table></figure>\n<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>\n<h2 id=\"hexo函数\"><a href=\"#hexo函数\" class=\"headerlink\" title=\"hexo函数\"></a>hexo函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;%- __(<span class=\"hljs-string\">&#x27;Menu.&#x27;</span> + name) %&gt;<br></code></pre></td></tr></table></figure>\n<p>__下划线函数在 <code>hexo</code> 变量 可以查看 <code>Lodash</code> 函数，专门用于<code>json</code>取值<br>最后总结<br>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 <code>Hexo</code> 主题有了一定的了解。其实说白了，<code>Hexo</code> 就是把那些 <code>Markdown</code> 文件按照不同的布局模板，填上对应的数据生成 <code>HTML</code> 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 <code>stylus/less/sass</code> 等文件编译。<br>本文并没有提及有关页面 <code>JavaScript</code> 的部分，实际上与写 <code>CSS</code> 样式相同。在 <code>source/js</code> 中写 <code>JavaScript</code> 脚本，然后在模板中引入即可。<br>感谢阅读，希望对你有所帮助。</p>"},{"title":"洛谷 P2295-MICE","date":"2020-10-23T10:26:55.000Z","link_c":"Explanation","link_name":"Luogu-P2295-Mice","top":1001,"mathjax":true,"_content":"\n\n\n## 题目大意\n\n一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）\n\n<!--more-->\n\n## 思路\n\n&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。\n\n&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：\n\n&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。\n\n&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.\n那么我们这样就得到了状态转移方程和预处理。预处理`val[i][j]`数组表示第`i`行`j`列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。\n\n&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右\n\n### 初始化\n\n```c++\nfor(int i=0;i<=n;i++)\n\tfor(int j=0;j<=m;j++)\n\t\tv[i][j]+=a[i][j+1]+a[i+1][j];//记录当前点右边和下边的1的个数\nmemset(f,0x3f,sizeof(f));\nf[1][0][0]=f[1][0][1]=v[1][0]; \nf[0][1][0]=f[0][1][1]=v[0][1];\nf[1][1][0]=f[1][1][1]=0;\n```\n\n### 状态转移\n\n- 从左边来：`f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);`\n\n- 从右边来：`f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);`\n\n### 总代码\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint n,m,v[1010][1010],f[1010][1010][2];\nint a[1010][1010];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=0;i<=n;i++)\n\t\tfor(int j=0;j<=m;j++)\n\t\t\tv[i][j]+=a[i][j+1]+a[i+1][j];\n\tmemset(f,0x3f,sizeof(f));\n\tf[1][0][0]=f[1][0][1]=v[1][0]; \n\tf[0][1][0]=f[0][1][1]=v[0][1];\n\tf[1][1][0]=f[1][1][1]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tf[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);\n\t\t\tf[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);\n\t\t\t//cout<<f[i][j][0]<<' '<<f[i][j][1]<<\" * \";\n\t\t}\n\t\t//cout<<endl;\n\t}\n\tcout<<min(f[n][m][0],f[n][m][1]);\n\treturn 0;\n}\n```","source":"_posts/洛谷 P2295-MICE 题解.md","raw":"---\ntitle: '洛谷 P2295-MICE'\ndate: 2020-10-23 18:26:55\nlink_c: Explanation\nlink_name: Luogu-P2295-Mice\ntop: 1001\nmathjax: true\ntags: Luogu\ncategories: C++\n---\n\n\n\n## 题目大意\n\n一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）\n\n<!--more-->\n\n## 思路\n\n&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。\n\n&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：\n\n&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。\n\n&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.\n那么我们这样就得到了状态转移方程和预处理。预处理`val[i][j]`数组表示第`i`行`j`列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。\n\n&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右\n\n### 初始化\n\n```c++\nfor(int i=0;i<=n;i++)\n\tfor(int j=0;j<=m;j++)\n\t\tv[i][j]+=a[i][j+1]+a[i+1][j];//记录当前点右边和下边的1的个数\nmemset(f,0x3f,sizeof(f));\nf[1][0][0]=f[1][0][1]=v[1][0]; \nf[0][1][0]=f[0][1][1]=v[0][1];\nf[1][1][0]=f[1][1][1]=0;\n```\n\n### 状态转移\n\n- 从左边来：`f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);`\n\n- 从右边来：`f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);`\n\n### 总代码\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint n,m,v[1010][1010],f[1010][1010][2];\nint a[1010][1010];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=0;i<=n;i++)\n\t\tfor(int j=0;j<=m;j++)\n\t\t\tv[i][j]+=a[i][j+1]+a[i+1][j];\n\tmemset(f,0x3f,sizeof(f));\n\tf[1][0][0]=f[1][0][1]=v[1][0]; \n\tf[0][1][0]=f[0][1][1]=v[0][1];\n\tf[1][1][0]=f[1][1][1]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tf[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);\n\t\t\tf[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);\n\t\t\t//cout<<f[i][j][0]<<' '<<f[i][j][1]<<\" * \";\n\t\t}\n\t\t//cout<<endl;\n\t}\n\tcout<<min(f[n][m][0],f[n][m][1]);\n\treturn 0;\n}\n```","slug":"洛谷 P2295-MICE 题解","published":1,"updated":"2021-01-15T03:55:16.113Z","_id":"ckjxqtmjp000iiwb13ubv1dm0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。</p>\n<p>&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：</p>\n<p>&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。</p>\n<p>&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.<br>那么我们这样就得到了状态转移方程和预处理。预处理<code>val[i][j]</code>数组表示第<code>i</code>行<code>j</code>列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。</p>\n<p>&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<span class=\"hljs-comment\">//记录当前点右边和下边的1的个数</span><br><span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a>状态转移</h3><ul>\n<li><p>从左边来：<code>f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);</code></p>\n</li>\n<li><p>从右边来：<code>f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);</code></p>\n</li>\n</ul>\n<h3 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> n,m,v[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>],f[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t\t<span class=\"hljs-built_in\">cin</span>&gt;&gt;a[i][j];<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<br>\t<span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>\tf[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t&#123;<br>\t\t\tf[i][j][<span class=\"hljs-number\">0</span>]=min(f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]+v[i][j]+a[i<span class=\"hljs-number\">-1</span>][j],f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]+v[i][j]);<br>\t\t\tf[i][j][<span class=\"hljs-number\">1</span>]=min(f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">1</span>]+v[i][j]+a[i][j<span class=\"hljs-number\">-1</span>],f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">0</span>]+v[i][j]);<br>\t\t\t<span class=\"hljs-comment\">//cout&lt;&lt;f[i][j][0]&lt;&lt;&#x27; &#x27;&lt;&lt;f[i][j][1]&lt;&lt;&quot; * &quot;;</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//cout&lt;&lt;endl;</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;min(f[n][m][<span class=\"hljs-number\">0</span>],f[n][m][<span class=\"hljs-number\">1</span>]);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。</p>\n<p>&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：</p>\n<p>&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。</p>\n<p>&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.<br>那么我们这样就得到了状态转移方程和预处理。预处理<code>val[i][j]</code>数组表示第<code>i</code>行<code>j</code>列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。</p>\n<p>&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<span class=\"hljs-comment\">//记录当前点右边和下边的1的个数</span><br><span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a>状态转移</h3><ul>\n<li><p>从左边来：<code>f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);</code></p>\n</li>\n<li><p>从右边来：<code>f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);</code></p>\n</li>\n</ul>\n<h3 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> n,m,v[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>],f[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t\t<span class=\"hljs-built_in\">cin</span>&gt;&gt;a[i][j];<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<br>\t<span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>\tf[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t&#123;<br>\t\t\tf[i][j][<span class=\"hljs-number\">0</span>]=min(f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]+v[i][j]+a[i<span class=\"hljs-number\">-1</span>][j],f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]+v[i][j]);<br>\t\t\tf[i][j][<span class=\"hljs-number\">1</span>]=min(f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">1</span>]+v[i][j]+a[i][j<span class=\"hljs-number\">-1</span>],f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">0</span>]+v[i][j]);<br>\t\t\t<span class=\"hljs-comment\">//cout&lt;&lt;f[i][j][0]&lt;&lt;&#x27; &#x27;&lt;&lt;f[i][j][1]&lt;&lt;&quot; * &quot;;</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//cout&lt;&lt;endl;</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;min(f[n][m][<span class=\"hljs-number\">0</span>],f[n][m][<span class=\"hljs-number\">1</span>]);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"猫国建设者外挂","mathjax":true,"date":"2021-01-14T11:56:13.000Z","link_c":"Game","link_name":"Cats-Country","top":4000,"_content":"\n猫国建设者外挂\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n格式：ganePage.resPool.get(\"XXXXX\").value += XXXX\n物品：\n>  猫薄荷 catnip\n>  木材 wood\n>  矿物 minerals\n>  煤炭 coal\n>  铁锭 iron\n>  钛锭 titanium\n>  黄金 gold\n>  石油 oil\n>  铀 uanium\n>  难得素 unobainium\n>  喵力 manpower\n>  科研点 science\n>  文化点 culture\n>  信仰 faith\n>  喵星人 kittens\n>  斑马 zebras\n>  星图 starchart\n>  火箭 rocket\n>  时间通量 temporalFlux\n>  浮点运算能力 gflops\n>  哈希 hashrates\n>  皮革 furs\n>  象牙 ivory\n>  香料 spice\n>  独角兽 unicorns\n>  空角兽 alicorn\n>  眼泪 tears\n>  业力(貌似无法调整) karma \n>  领导力 paragon\n>  燃烧领导力 burnedParagon\n>  时光水晶 timeCrystal\n>  悲伤 sorrow\n>  礼盒 elderBox\n>  包装纸 wrappingPaper\n>  黑币 blackcoin\n>  横梁 beam\n>  石板 slab   \n>  混凝土 concrate\n>  金属板 plate\n>  钢铁 steel\n>  合金 alloy\n>  齿轮 gear\n>  脚手架 scaffold\n>  船 ship\n>  油轮 tanker\n>  煤油 kerosene\n>  手稿 manuspan\n>  羊皮纸 parchment\n>  摘要 compedium\n>  蓝图 blueprint\n>  钍 thorium\n>  巨石 megalith\n>  死灵兽 necrocorn\n>  E合金 eludium\n>  虚空 void\n>  圣遗物 relic\n>  反物质 antimatter","source":"_posts/猫国建设者外挂.md","raw":"---\ntitle: 猫国建设者外挂\nmathjax: true\ndate: 2021-01-14 19:56:13\nlink_c: Game\nlink_name: Cats-Country\ntop: 4000\ntags: Cats\ncategories: Game\n---\n\n猫国建设者外挂\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n格式：ganePage.resPool.get(\"XXXXX\").value += XXXX\n物品：\n>  猫薄荷 catnip\n>  木材 wood\n>  矿物 minerals\n>  煤炭 coal\n>  铁锭 iron\n>  钛锭 titanium\n>  黄金 gold\n>  石油 oil\n>  铀 uanium\n>  难得素 unobainium\n>  喵力 manpower\n>  科研点 science\n>  文化点 culture\n>  信仰 faith\n>  喵星人 kittens\n>  斑马 zebras\n>  星图 starchart\n>  火箭 rocket\n>  时间通量 temporalFlux\n>  浮点运算能力 gflops\n>  哈希 hashrates\n>  皮革 furs\n>  象牙 ivory\n>  香料 spice\n>  独角兽 unicorns\n>  空角兽 alicorn\n>  眼泪 tears\n>  业力(貌似无法调整) karma \n>  领导力 paragon\n>  燃烧领导力 burnedParagon\n>  时光水晶 timeCrystal\n>  悲伤 sorrow\n>  礼盒 elderBox\n>  包装纸 wrappingPaper\n>  黑币 blackcoin\n>  横梁 beam\n>  石板 slab   \n>  混凝土 concrate\n>  金属板 plate\n>  钢铁 steel\n>  合金 alloy\n>  齿轮 gear\n>  脚手架 scaffold\n>  船 ship\n>  油轮 tanker\n>  煤油 kerosene\n>  手稿 manuspan\n>  羊皮纸 parchment\n>  摘要 compedium\n>  蓝图 blueprint\n>  钍 thorium\n>  巨石 megalith\n>  死灵兽 necrocorn\n>  E合金 eludium\n>  虚空 void\n>  圣遗物 relic\n>  反物质 antimatter","slug":"猫国建设者外挂","published":1,"updated":"2021-01-14T11:59:33.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjxqtmjp000liwb1gpg1fjvg","content":"<p>猫国建设者外挂</p>\n<a id=\"more\"></a>\n\n<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>格式：ganePage.resPool.get(“XXXXX”).value += XXXX<br>物品：</p>\n<blockquote>\n<p> 猫薄荷 catnip<br> 木材 wood<br> 矿物 minerals<br> 煤炭 coal<br> 铁锭 iron<br> 钛锭 titanium<br> 黄金 gold<br> 石油 oil<br> 铀 uanium<br> 难得素 unobainium<br> 喵力 manpower<br> 科研点 science<br> 文化点 culture<br> 信仰 faith<br> 喵星人 kittens<br> 斑马 zebras<br> 星图 starchart<br> 火箭 rocket<br> 时间通量 temporalFlux<br> 浮点运算能力 gflops<br> 哈希 hashrates<br> 皮革 furs<br> 象牙 ivory<br> 香料 spice<br> 独角兽 unicorns<br> 空角兽 alicorn<br> 眼泪 tears<br> 业力(貌似无法调整) karma<br> 领导力 paragon<br> 燃烧领导力 burnedParagon<br> 时光水晶 timeCrystal<br> 悲伤 sorrow<br> 礼盒 elderBox<br> 包装纸 wrappingPaper<br> 黑币 blackcoin<br> 横梁 beam<br> 石板 slab<br> 混凝土 concrate<br> 金属板 plate<br> 钢铁 steel<br> 合金 alloy<br> 齿轮 gear<br> 脚手架 scaffold<br> 船 ship<br> 油轮 tanker<br> 煤油 kerosene<br> 手稿 manuspan<br> 羊皮纸 parchment<br> 摘要 compedium<br> 蓝图 blueprint<br> 钍 thorium<br> 巨石 megalith<br> 死灵兽 necrocorn<br> E合金 eludium<br> 虚空 void<br> 圣遗物 relic<br> 反物质 antimatter</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>猫国建设者外挂</p>","more":"<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>格式：ganePage.resPool.get(“XXXXX”).value += XXXX<br>物品：</p>\n<blockquote>\n<p> 猫薄荷 catnip<br> 木材 wood<br> 矿物 minerals<br> 煤炭 coal<br> 铁锭 iron<br> 钛锭 titanium<br> 黄金 gold<br> 石油 oil<br> 铀 uanium<br> 难得素 unobainium<br> 喵力 manpower<br> 科研点 science<br> 文化点 culture<br> 信仰 faith<br> 喵星人 kittens<br> 斑马 zebras<br> 星图 starchart<br> 火箭 rocket<br> 时间通量 temporalFlux<br> 浮点运算能力 gflops<br> 哈希 hashrates<br> 皮革 furs<br> 象牙 ivory<br> 香料 spice<br> 独角兽 unicorns<br> 空角兽 alicorn<br> 眼泪 tears<br> 业力(貌似无法调整) karma<br> 领导力 paragon<br> 燃烧领导力 burnedParagon<br> 时光水晶 timeCrystal<br> 悲伤 sorrow<br> 礼盒 elderBox<br> 包装纸 wrappingPaper<br> 黑币 blackcoin<br> 横梁 beam<br> 石板 slab<br> 混凝土 concrate<br> 金属板 plate<br> 钢铁 steel<br> 合金 alloy<br> 齿轮 gear<br> 脚手架 scaffold<br> 船 ship<br> 油轮 tanker<br> 煤油 kerosene<br> 手稿 manuspan<br> 羊皮纸 parchment<br> 摘要 compedium<br> 蓝图 blueprint<br> 钍 thorium<br> 巨石 megalith<br> 死灵兽 necrocorn<br> E合金 eludium<br> 虚空 void<br> 圣遗物 relic<br> 反物质 antimatter</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckjxqtmjd0001iwb1c1y0b6by","category_id":"ckjxqtmjg0003iwb1f2ac9tbh","_id":"ckjxqtmjk000biwb1e4tq5xjs"},{"post_id":"ckjxqtmjm000ciwb19qhi13g4","category_id":"ckjxqtmjg0003iwb1f2ac9tbh","_id":"ckjxqtmjp000jiwb10m5yhlzc"},{"post_id":"ckjxqtmjn000fiwb1frts99gy","category_id":"ckjxqtmjg0003iwb1f2ac9tbh","_id":"ckjxqtmjq000miwb1d7o70uei"},{"post_id":"ckjxqtmjp000liwb1gpg1fjvg","category_id":"ckjxqtmjo000giwb1c5yo1uj5","_id":"ckjxqtmjr000qiwb10k681yez"},{"post_id":"ckjxqtmjm000diwb1ep5x9qhp","category_id":"ckjxqtmjo000giwb1c5yo1uj5","_id":"ckjxqtmjr000siwb11x7eba4o"},{"post_id":"ckjxqtmjp000iiwb13ubv1dm0","category_id":"ckjxqtmjq000niwb1bhquhvqc","_id":"ckjxqtmjs000uiwb1hchta8bf"}],"PostTag":[{"post_id":"ckjxqtmjd0001iwb1c1y0b6by","tag_id":"ckjxqtmjh0004iwb16il9ex3c","_id":"ckjxqtmjj0008iwb15ffgfla1"},{"post_id":"ckjxqtmjm000ciwb19qhi13g4","tag_id":"ckjxqtmjh0004iwb16il9ex3c","_id":"ckjxqtmjn000eiwb1cvhf51ss"},{"post_id":"ckjxqtmjn000fiwb1frts99gy","tag_id":"ckjxqtmjh0004iwb16il9ex3c","_id":"ckjxqtmjp000kiwb1eabo9jjg"},{"post_id":"ckjxqtmjm000diwb1ep5x9qhp","tag_id":"ckjxqtmjo000hiwb1g08sc3ri","_id":"ckjxqtmjr000piwb1ge8u4bzq"},{"post_id":"ckjxqtmjp000iiwb13ubv1dm0","tag_id":"ckjxqtmjq000oiwb1g4db7p20","_id":"ckjxqtmjr000tiwb1eu6hb10z"},{"post_id":"ckjxqtmjp000liwb1gpg1fjvg","tag_id":"ckjxqtmjr000riwb1av49at96","_id":"ckjxqtmjs000viwb14v37bzwb"}],"Tag":[{"name":"Hexo","_id":"ckjxqtmjh0004iwb16il9ex3c"},{"name":"Dino","_id":"ckjxqtmjo000hiwb1g08sc3ri"},{"name":"Luogu","_id":"ckjxqtmjq000oiwb1g4db7p20"},{"name":"Cats","_id":"ckjxqtmjr000riwb1av49at96"}]}}