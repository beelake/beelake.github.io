{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/Beelake-Document/index.md","hash":"cd9cd7bec2f5193b1dcbabe98aece8ce3a34e91a","modified":1611752606119},{"_id":"source/_posts/从 0 开始制作 Hexo 博客主题.md","hash":"95a5e3b2f0cd5eb26e56e7c74d52d565ceef3666","modified":1611835541823},{"_id":"source/_posts/hexo主题添加 mathjax.md","hash":"bfe6993c8ad08554222c610b7da3bd8b6881a944","modified":1611835532396},{"_id":"source/_posts/小恐龙外挂.md","hash":"9a8ddbf09978ed6edeed2d15c63a171ca576462a","modified":1611835520003},{"_id":"source/_posts/洛谷 P2295-MICE 题解.md","hash":"d801ad19b41b7482d7507a79bf8eafe4b98ba183","modified":1611835547821},{"_id":"source/about/index.md","hash":"1b8bf10d9dcb8e6cd23912a29dee6d142154e6f7","modified":1611836726011},{"_id":"source/comment/index.md","hash":"fb42add1fc258742a21099388bcb8703873597b9","modified":1611752606135},{"_id":"source/categories/index.md","hash":"4b5b9b193c359eb2871266dbc5dc079f5668bffa","modified":1611752606135},{"_id":"source/_posts/hexo+github博客搭建.md","hash":"e0b668e4832d3f6d73911efc22ea20d83ceeadba","modified":1611835537199},{"_id":"source/tags/index.md","hash":"77e0418f9db1766371706d76e110a416d6622fa6","modified":1611752606135},{"_id":"source/_posts/猫国建设者外挂.md","hash":"2c89cdb906bb70ff4b2e6d76b5180eab297172f4","modified":1611835527574},{"_id":"source/link/index.md","hash":"f38948ff18ce70f21738b4ca8b519087dec932c8","modified":1611836349275},{"_id":"source/_data/link.yml","hash":"3e62e939867cbd9dc40d8f63cb373f3dfdcf4a50","modified":1611752606135},{"_id":"themes/butterfly/_config.yml","hash":"c51f8a41d3eb766a87adc83de627b6ad8cb8fb66","modified":1611915097522},{"_id":"themes/butterfly/package.json","hash":"54551814617177afea0cb735e74c954e5eca0370","modified":1611752606385},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1611752606353},{"_id":"themes/butterfly/languages/default.yml","hash":"1a33cedf0ca8d4f82b3ada1882e594f5ef32eb2b","modified":1611752606353},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1611752606353},{"_id":"themes/butterfly/README.md","hash":"7e82a4b91ff9ca61e04aabe6e8c02227b49f5327","modified":1611752606353},{"_id":"themes/butterfly/languages/en.yml","hash":"6735ea311519aa1c39b188a1b1d77b5534967d38","modified":1611752606353},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2e8ac64c9bc1828556fb72fd8f3ccebe90cdca02","modified":1611752606353},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"7fc90506062c4a05fc45b320e4c0e4f8b30c34ca","modified":1611752606353},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1611752606353},{"_id":"themes/butterfly/layout/404.pug","hash":"def6b20a33b69f1be87a750a15a34c305d331a67","modified":1611752606353},{"_id":"themes/butterfly/README_CN.md","hash":"c785124cd3ab1360baa5d7b18d979b7400438669","modified":1611752606353},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1611752606353},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1611752606385},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1611752606385},{"_id":"themes/butterfly/layout/page.pug","hash":"05ad3560b9300b4ad77c76f75e1801bc5fa99de3","modified":1611752606385},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1611752606385},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1611752606353},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"02f85e3ec65c6fb4381c48e67468daf569616f85","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"95e30ea880105bfbab5461e0b312aff621156a8f","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"b0786e4b08231d178b8484e6c5cf01c22633612f","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"790c94530e5b49fd6e144e83c7958969463380ec","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"86b2a4d500542fe764fdc5ff71cf029604325930","modified":1611752606369},{"_id":"themes/butterfly/scripts/events/404.js","hash":"5f6127ede7d139891208340b5cf5bf9314e4be7d","modified":1611752606385},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1611752606353},{"_id":"themes/butterfly/scripts/events/init.js","hash":"f7ab55363d05c945569d9ac4afc889f9706308c6","modified":1611752606385},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1611752606385},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"1e2ac4d26df7cd18a92f1404329f8eb1c388dc18","modified":1611752606385},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1611752606385},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"dbce193ba170e004790550fe4694de8e29b299b9","modified":1611752606385},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1611752606385},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"f42b2358a44d91ef6c853ce75f23af6e8d3ff423","modified":1611752606385},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"0745597f4ffadde037e57e0f66f7d984dc576dc6","modified":1611752606385},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1611752606353},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"54c0c9c6d4d4ca754680cd24d7e204a745a6eec0","modified":1611752606385},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1611752606385},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1611752606385},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1611752606385},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1611752606385},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1611752606385},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1611752606400},{"_id":"themes/butterfly/source/css/var.styl","hash":"ae8193bd0107c823b8d2a123f1c301084c9c227a","modified":1611752606400},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1611752606400},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1611752606400},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1611752606400},{"_id":"themes/butterfly/source/js/main.js","hash":"0fb490e034cee952b303aacca37f1496fffb9102","modified":1611752606400},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1611752606400},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"767b425f97e74a98002f4a435e36e8ec27e8a994","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f3c70b8e31e08d83193193a2de84aac3261afa05","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"e33b993af0bfc521334dac8e3c8a227dfbf9fcaa","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/js.pug","hash":"473059d3a4a63fa95ea4d2ca71ae16c003502e0a","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"1ddbd09e1902da7fa4bf7824654f132e41622c42","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"ac7988ef2d15a50e60b1ca3f2d9a18506f6b8497","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"d22d4c98028272dfc6c2e721e469f572a6b62ed3","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"0060598ca1cf25619bdb110ea2c83c690e4d2939","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"4b104ef783db8bdd754cb0781728ffbe92000051","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1611752606353},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"90b5c2600569f8cf769c5fb3a37c12536f71e375","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2beb27e33e4492fa80e88c37dcb7a3ffd7da9e24","modified":1611752606353},{"_id":"themes/butterfly/layout/includes/page/artitalk.pug","hash":"a02e5d18f12844ac1fbfa04d03798ff9e73090bc","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"7e7832aafdf5ca50e71a039ad3fc98d8ef6e7d30","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"dde41fedcaca0e9aba06ad93468df8cb05327028","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"e0e8bf00ef7a0a62ea2265bd5e4a33d0edab5946","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"102d0cf78954636efa3586adf79b5efb56d8e59e","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1611752606369},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"51f3227814fd229ddb2c9a2dd75a4b8effee9ad5","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"cabf9ee6a2886e6ede17f224dfbb161a9b1258e7","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"ff6d8dfc187d6e5e6139bbf3e0d831dbe1e9a530","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"8318c7c9a6aef966afba44e283111e7ff0b2f04f","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"b088fa11b89a05c2b49e6a27c2b862954e0b0ec2","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1611752606385},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8c5b241773597a412dbf3ebaca1f0bf504934a33","modified":1611752606385},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"56ce639b394ba195207ee00f5a2d6f22926b403f","modified":1611752606385},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"cfafb671a6ebad792e3636f03081f36e9799a5df","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"d67ecb6c950e802a9c73975b13cab44f899eb192","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"4f0958e71dde2c4a2cce2ebec48e416abc41be68","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"84c14368d3fab66d5fb7d03678766274e2e0d84f","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d45d1c62591225ae28611e02625eda98779c6576","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e418e129012314e4baf9fce574d30d16ced9936f","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6149c50ad33b3feb3da8a9d0b9e6557d1137210","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"e00d34774a0d5644bae9989f0e89743b5f9e2ea5","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1611752606385},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"257f08063d056bcc9fe385d7913df19b6503d93d","modified":1611752606385},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"767a0de8c54a67f679b36a86598d77f813f7db06","modified":1611752606400},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"9141857a172aa85dbddd614f17decb02e499e2b8","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"75c87cb69b2eb2a219eec9447cd79282ef612a68","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4058ab759577efe280d5e38902be39054ed4b471","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"3c7a7efbb14d8ce6538f612992aa1a62fd278991","modified":1611752606400},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"5fe4235c038ed128819bd6918cd0781b372b598e","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1611752606400},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1611752606400},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1611752606400},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1611752606400},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1611752606369},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"47d5367d8308a5a134058f9f63c33c75890960f8","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"663a298253eddb5126ca1a6139d69c7097ffb52e","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"a8d8be37236400508e97f75615f03cedccacddfb","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"9b6b7b589ef7a8109d88ba439b2d8baf7286b961","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1611752606369},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"13c4bde63ff6dade449e753d29a9b21a7dd460b2","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"96f04c0e7a5dfc1980e69f9b0bf277342de6e303","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"502e6a3ab69db9184cb78ccc8fe4794d047ea36f","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"1060d8e9258a55d7d453f49d9f78ad692f416221","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1611752606369},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1611752606400},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"9379b5b986b9a8ffdcd15d39862cbaafbcfabebe","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"70125dc478ae20d5f6b4b908260fdc451d803c6c","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"7935e92db64ca047d94404e5fc390a207e857a87","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"e4f11ee6b2bce37f7a88b2642ff0079e7d98f26f","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1611752606369},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1611752606369},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"1b2dc0ef768c9be9f18d1c1f93d88f916482c5df","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"ba3bdf02a6c78b15eada95638173a11445dac7ac","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"ebae44a37ac143f4e35523ebd6809371958fb930","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1611752606385},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"c1747b8641303a1d9472ec94f2bc654885feb270","modified":1611752606385},{"_id":"public/404.html","hash":"853ace807a9100ae56198d52914cfe76678d71ca","modified":1611915269127},{"_id":"public/Beelake-Document/index.html","hash":"e7f3ec6a2c09d6942584201514151c6a41e9a68c","modified":1611915269127},{"_id":"public/about/index.html","hash":"38f2f711c646e3ea56da25877eb21934ba4cd326","modified":1611915269127},{"_id":"public/comment/index.html","hash":"df4e011179da0499c57f6c9e03a91fe58b242b43","modified":1611915269127},{"_id":"public/categories/index.html","hash":"3ce192d2817327ed45616580c7a691519bb63b35","modified":1611915269127},{"_id":"public/link/index.html","hash":"dc05426cb2a9a34d0d561b74751b8cfad210a6e4","modified":1611915269127},{"_id":"public/tags/index.html","hash":"5e2fa719b70a0df157863916481eb03750b86fc9","modified":1611915269127},{"_id":"public/Game/Dinosaur/index.html","hash":"23222698a76a7df74214d1f68ca0ecd24c761012","modified":1611915269127},{"_id":"public/Game/Cats-Country/index.html","hash":"01250c89a71d8f66999442b90eafbe3655a559e6","modified":1611915269127},{"_id":"public/Hexo/Mathjax/index.html","hash":"7fed7f8b956c60a6fce20ed6496dac31d250367d","modified":1611915269127},{"_id":"public/Explanation/Luogu-P2295-Mice/index.html","hash":"ea5ccd16833adecd08ba5277e6a84c5f0b02199f","modified":1611915269127},{"_id":"public/Hexo/Theme-Made-By-Myself/index.html","hash":"ab87671b109b6a4cd2780a3a4cd19b1c5626eabf","modified":1611915269127},{"_id":"public/archives/index.html","hash":"5aa882b3f8fc93aaef8d0b3c16788052fc2ccdce","modified":1611915269127},{"_id":"public/Hexo/Hexo+GitHub-Blog-Building/index.html","hash":"2f8957be85d61a8412b00e5f8d8e4b19e6372121","modified":1611915269127},{"_id":"public/archives/2020/index.html","hash":"f4f96e2b39430adcecc344931745937313658ea8","modified":1611915269127},{"_id":"public/archives/2020/10/index.html","hash":"09ce85a09b04a94e0ff674a49fa010c00ce9d843","modified":1611915269127},{"_id":"public/archives/2021/index.html","hash":"13ed895ba93fda3b0cf58c575b7224023a664d59","modified":1611915269127},{"_id":"public/archives/2021/01/index.html","hash":"30dd7f13a1ec5795fc83f8f317f0c614d0dd9c78","modified":1611915269127},{"_id":"public/categories/Hexo/index.html","hash":"5e6e4c47423fb0705140d6d4f1d33be8c469f50a","modified":1611915269127},{"_id":"public/categories/Game/index.html","hash":"5d7c4d5333415bab005af1a3c694ae72af0290f2","modified":1611915269127},{"_id":"public/categories/C/index.html","hash":"dc48f3c948fa7a4bf46afd9e136ce941038a06bd","modified":1611915269127},{"_id":"public/tags/Hexo/index.html","hash":"b66e7b71a0d0b0be66ef9dee43da38d7cac2b780","modified":1611915269127},{"_id":"public/tags/Dino/index.html","hash":"3b37768ac5d80227f1a5541068907aa37be9a0fc","modified":1611915269127},{"_id":"public/tags/Luogu/index.html","hash":"e4ea73c8a4a6ab105d20929e588c4a7c51bb691b","modified":1611915269127},{"_id":"public/tags/Cats/index.html","hash":"dc5a0cff42a907a07496ab8b353db83141bb4eaa","modified":1611915269127},{"_id":"public/index.html","hash":"c359b2c2aa42e52c89a1c0842e8340b6848d27c1","modified":1611915269127},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1611915269127},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1611915269127},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1611915269127},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1611915269127},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1611915269127},{"_id":"public/css/index.css","hash":"61c13e69b625f2dc59b471cce2c94d92e20fcebd","modified":1611915269127},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611915269127},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1611915269127},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1611915269127},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1611915269127},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1611915269127},{"_id":"public/js/main.js","hash":"edfa9babbf6bcb7e966a691ee51402d8d43fe60f","modified":1611915269127}],"Category":[{"name":"Hexo","_id":"ckki4qea10004e8b15rld0m39"},{"name":"Game","_id":"ckki4qeac000le8b1arx2dydt"},{"name":"C++","_id":"ckki4qead000qe8b1aclgglqs"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"[Beelake]document","date":"2020-11-27T15:35:17.000Z","_content":"\n介绍 **主题简介 | 主题食用 | 更新日志**\n\n<!--more-->\n\n## 主题简介\n\n### 主题名\n\n&#8195;名称：$Beelake$\n\n&#8195;来源：$[元祖]Beelake$\n\n### 开发人员\n\n&#8192;$[元祖]Beelake$\n\n### 其他\n\n&#8195;- 感谢支持\n\n&#8195;- 如果有好的[提议](https://github.com/beelake/beelake.github.io/issues)，$beelake$ 都会听的 😝\n\n## 主题食用\n\n### #$Download$ 下载\n\n&#8195;[点我下载合适的版本吧](https://github.com/beelake/Theme-beelake)\n\n### #$Basic Settings$ 基础设置\n\n| ddd | ddd | \\alpha","source":"Beelake-Document/index.md","raw":"---\ntitle: '[Beelake]document'\ndate: 2020-11-27 23:35:17\n---\n\n介绍 **主题简介 | 主题食用 | 更新日志**\n\n<!--more-->\n\n## 主题简介\n\n### 主题名\n\n&#8195;名称：$Beelake$\n\n&#8195;来源：$[元祖]Beelake$\n\n### 开发人员\n\n&#8192;$[元祖]Beelake$\n\n### 其他\n\n&#8195;- 感谢支持\n\n&#8195;- 如果有好的[提议](https://github.com/beelake/beelake.github.io/issues)，$beelake$ 都会听的 😝\n\n## 主题食用\n\n### #$Download$ 下载\n\n&#8195;[点我下载合适的版本吧](https://github.com/beelake/Theme-beelake)\n\n### #$Basic Settings$ 基础设置\n\n| ddd | ddd | \\alpha","updated":"2021-01-27T13:03:26.119Z","path":"Beelake-Document/index.html","comments":1,"layout":"page","_id":"ckki4qe9v0000e8b126bl9jrm","content":"<p>介绍 <strong>主题简介 | 主题食用 | 更新日志</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"主题简介\"><a href=\"#主题简介\" class=\"headerlink\" title=\"主题简介\"></a>主题简介</h2><h3 id=\"主题名\"><a href=\"#主题名\" class=\"headerlink\" title=\"主题名\"></a>主题名</h3><p>&#8195;名称：$Beelake$</p>\n<p>&#8195;来源：$[元祖]Beelake$</p>\n<h3 id=\"开发人员\"><a href=\"#开发人员\" class=\"headerlink\" title=\"开发人员\"></a>开发人员</h3><p>&#8192;$[元祖]Beelake$</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>&#8195;- 感谢支持</p>\n<p>&#8195;- 如果有好的<a href=\"https://github.com/beelake/beelake.github.io/issues\">提议</a>，$beelake$ 都会听的 😝</p>\n<h2 id=\"主题食用\"><a href=\"#主题食用\" class=\"headerlink\" title=\"主题食用\"></a>主题食用</h2><h3 id=\"Download-下载\"><a href=\"#Download-下载\" class=\"headerlink\" title=\"#$Download$ 下载\"></a>#$Download$ 下载</h3><p>&#8195;<a href=\"https://github.com/beelake/Theme-beelake\">点我下载合适的版本吧</a></p>\n<h3 id=\"Basic-Settings-基础设置\"><a href=\"#Basic-Settings-基础设置\" class=\"headerlink\" title=\"#$Basic Settings$ 基础设置\"></a>#$Basic Settings$ 基础设置</h3><p>| ddd | ddd | \\alpha</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"<p>介绍 <strong>主题简介 | 主题食用 | 更新日志</strong></p>","more":"<h2 id=\"主题简介\"><a href=\"#主题简介\" class=\"headerlink\" title=\"主题简介\"></a>主题简介</h2><h3 id=\"主题名\"><a href=\"#主题名\" class=\"headerlink\" title=\"主题名\"></a>主题名</h3><p>&#8195;名称：$Beelake$</p>\n<p>&#8195;来源：$[元祖]Beelake$</p>\n<h3 id=\"开发人员\"><a href=\"#开发人员\" class=\"headerlink\" title=\"开发人员\"></a>开发人员</h3><p>&#8192;$[元祖]Beelake$</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>&#8195;- 感谢支持</p>\n<p>&#8195;- 如果有好的<a href=\"https://github.com/beelake/beelake.github.io/issues\">提议</a>，$beelake$ 都会听的 😝</p>\n<h2 id=\"主题食用\"><a href=\"#主题食用\" class=\"headerlink\" title=\"主题食用\"></a>主题食用</h2><h3 id=\"Download-下载\"><a href=\"#Download-下载\" class=\"headerlink\" title=\"#$Download$ 下载\"></a>#$Download$ 下载</h3><p>&#8195;<a href=\"https://github.com/beelake/Theme-beelake\">点我下载合适的版本吧</a></p>\n<h3 id=\"Basic-Settings-基础设置\"><a href=\"#Basic-Settings-基础设置\" class=\"headerlink\" title=\"#$Basic Settings$ 基础设置\"></a>#$Basic Settings$ 基础设置</h3><p>| ddd | ddd | \\alpha</p>"},{"title":"关于","date":"2021-01-13T00:22:16.000Z","_content":"\n常用网名 Beelake​ ，初二党，坐标ZJ-NB-JC。\n\n联系方式：\n\n> QQ: 3162233587\n> \n> e-mail: \n>\n> >  qq: 3162233587@qq.com\n> >\n> >  163: beelake@163.com\n>\n> GitHub Issues","source":"about/index.md","raw":"---\ntitle: '关于'\ndate: 2021-1-13 8:22:16\n---\n\n常用网名 Beelake​ ，初二党，坐标ZJ-NB-JC。\n\n联系方式：\n\n> QQ: 3162233587\n> \n> e-mail: \n>\n> >  qq: 3162233587@qq.com\n> >\n> >  163: beelake@163.com\n>\n> GitHub Issues","updated":"2021-01-28T12:25:26.011Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckki4qea00002e8b1dlnbh7h2","content":"<p>常用网名 Beelake​ ，初二党，坐标ZJ-NB-JC。</p>\n<p>联系方式：</p>\n<blockquote>\n<p>QQ: 3162233587</p>\n<p>e-mail: </p>\n<blockquote>\n<p> qq: <a href=\"mailto:&#x33;&#49;&#x36;&#50;&#x32;&#x33;&#51;&#x35;&#56;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\">&#x33;&#49;&#x36;&#50;&#x32;&#x33;&#51;&#x35;&#56;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a></p>\n<p> 163: <a href=\"mailto:&#98;&#101;&#101;&#108;&#x61;&#107;&#101;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#98;&#101;&#101;&#108;&#x61;&#107;&#101;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p>\n</blockquote>\n<p>GitHub Issues</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>常用网名 Beelake​ ，初二党，坐标ZJ-NB-JC。</p>\n<p>联系方式：</p>\n<blockquote>\n<p>QQ: 3162233587</p>\n<p>e-mail: </p>\n<blockquote>\n<p> qq: <a href=\"mailto:&#x33;&#49;&#x36;&#50;&#x32;&#x33;&#51;&#x35;&#56;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\">&#x33;&#49;&#x36;&#50;&#x32;&#x33;&#51;&#x35;&#56;&#x37;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a></p>\n<p> 163: <a href=\"mailto:&#98;&#101;&#101;&#108;&#x61;&#107;&#101;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#98;&#101;&#101;&#108;&#x61;&#107;&#101;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p>\n</blockquote>\n<p>GitHub Issues</p>\n</blockquote>\n"},{"title":"留言板","date":"2021-01-14T11:41:19.000Z","_content":"\n欢迎各位同志在此留言！\n","source":"comment/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-14 19:41:19\n---\n\n欢迎各位同志在此留言！\n","updated":"2021-01-27T13:03:26.135Z","path":"comment/index.html","comments":1,"layout":"page","_id":"ckki4qea30006e8b1cxso3w2q","content":"<p>欢迎各位同志在此留言！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>欢迎各位同志在此留言！</p>\n"},{"title":"categories","date":"2021-01-14T11:41:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-01-14 19:41:19\ntype: categories\n---\n","updated":"2021-01-27T13:03:26.135Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckki4qea40008e8b1734c54xf","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友情鏈接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"\n> ### # 如何添加友链\n>\n> 请首先添加我的友链，然后在**这个页面**下方的评论区里申请，申请格式：\n>\n> ```\n> YAML\n> - name: \n>   avatar: \n>   link: \n>   descr: \n> ```\n>\n> 为了方便博主添加友链，请遵从这个格式，谢谢！\n\n\n\n> ### # 注意事项\n>\n> 1. 任何网址都可添加友链，包括但不限于博客，各类网站的主页，只要没有违法内容，都可以申请添加！\n> 2. 无论您是大佬，神仙，还是萌新，蒟蒻，抑或是文化课选手，都来者不拒，欢迎互换友链！\n> 3. 既然是互换友链，那么希望您能遵守承诺，如果您撤下了我的友链，那么相应的，您的友链也会被撤下，如果有特殊情况，可以在评论里留言。\n> 4. 最后，感谢您能访问我的小站","source":"link/index.md","raw":"---\ntitle: 友情鏈接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---\n\n> ### # 如何添加友链\n>\n> 请首先添加我的友链，然后在**这个页面**下方的评论区里申请，申请格式：\n>\n> ```\n> YAML\n> - name: \n>   avatar: \n>   link: \n>   descr: \n> ```\n>\n> 为了方便博主添加友链，请遵从这个格式，谢谢！\n\n\n\n> ### # 注意事项\n>\n> 1. 任何网址都可添加友链，包括但不限于博客，各类网站的主页，只要没有违法内容，都可以申请添加！\n> 2. 无论您是大佬，神仙，还是萌新，蒟蒻，抑或是文化课选手，都来者不拒，欢迎互换友链！\n> 3. 既然是互换友链，那么希望您能遵守承诺，如果您撤下了我的友链，那么相应的，您的友链也会被撤下，如果有特殊情况，可以在评论里留言。\n> 4. 最后，感谢您能访问我的小站","updated":"2021-01-28T12:19:09.275Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckki4qea5000ae8b1ag7l2eto","content":"<blockquote>\n<h3 id=\"如何添加友链\"><a href=\"#如何添加友链\" class=\"headerlink\" title=\"# 如何添加友链\"></a># 如何添加友链</h3><p>请首先添加我的友链，然后在<strong>这个页面</strong>下方的评论区里申请，申请格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">YAML<br>- name: <br>  avatar: <br>  link: <br>  descr: <br></code></pre></td></tr></table></figure>\n\n<p>为了方便博主添加友链，请遵从这个格式，谢谢！</p>\n</blockquote>\n<blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"# 注意事项\"></a># 注意事项</h3><ol>\n<li>任何网址都可添加友链，包括但不限于博客，各类网站的主页，只要没有违法内容，都可以申请添加！</li>\n<li>无论您是大佬，神仙，还是萌新，蒟蒻，抑或是文化课选手，都来者不拒，欢迎互换友链！</li>\n<li>既然是互换友链，那么希望您能遵守承诺，如果您撤下了我的友链，那么相应的，您的友链也会被撤下，如果有特殊情况，可以在评论里留言。</li>\n<li>最后，感谢您能访问我的小站</li>\n</ol>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<h3 id=\"如何添加友链\"><a href=\"#如何添加友链\" class=\"headerlink\" title=\"# 如何添加友链\"></a># 如何添加友链</h3><p>请首先添加我的友链，然后在<strong>这个页面</strong>下方的评论区里申请，申请格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">YAML<br>- name: <br>  avatar: <br>  link: <br>  descr: <br></code></pre></td></tr></table></figure>\n\n<p>为了方便博主添加友链，请遵从这个格式，谢谢！</p>\n</blockquote>\n<blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"# 注意事项\"></a># 注意事项</h3><ol>\n<li>任何网址都可添加友链，包括但不限于博客，各类网站的主页，只要没有违法内容，都可以申请添加！</li>\n<li>无论您是大佬，神仙，还是萌新，蒟蒻，抑或是文化课选手，都来者不拒，欢迎互换友链！</li>\n<li>既然是互换友链，那么希望您能遵守承诺，如果您撤下了我的友链，那么相应的，您的友链也会被撤下，如果有特殊情况，可以在评论里留言。</li>\n<li>最后，感谢您能访问我的小站</li>\n</ol>\n</blockquote>\n"},{"title":"tags","date":"2021-01-14T11:39:16.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\n\ntitle: tags\ndate: 2021-01-14 19:39:16\ntype: tags\n\n---\n\n","updated":"2021-01-27T13:03:26.135Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckki4qea7000fe8b1b7utgzk5","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"uuid":"0e63ccb1-4af5-b680-1d1e-c9b4b0cec905","title":"hexo+github博客搭建","date":"2020-10-18T08:09:54.000Z","link_c":"Hexo","link_name":"Hexo+GitHub-Blog-Building","top":2002,"mathjax":true,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\n\n\n## 准备\n\n先下载`git`和`nodejs`，[git](https://git-scm.com/downloads)、[nodejs](https://nodejs.org/en/download/). \n\n注意，`nodejs`用`msi`下载，不要下载`zip`\n\n<!--more-->\n\n打开`git`输入\n\n```\nnode -v\nnpm -v\n```\n\n检查nodejs是否下载好。\n\n若显示\n```\nXX.XX.XX或VXX.XX.XX\n```\n\n即可\n\n然后输入\n\n```\nnpm install -g hexo\n```\n\n等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有`done`没有`error`就行。\n\n## 本地建立\n\n新建一个文件夹，以下用`blog`代替。\n\n右键`blog`，打开`git bush`\n\n输入\n\n```\nhexo init blog\nnpm install\n```\n\n新建完成后，指定文件夹目录下有：\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- source：用来存放你的文章\n- themes：主题\n- _config.yml: 博客的配置文件\n\n`cd进入myblog`\n\n输入\n\n```\nhexo g\nhexo server\n```\n\n打开 [localhost:4000](localhost:4000) 查看\n\n## 网上建立\n首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在`GitHub.com`中看到一个`New repository`，新建仓库。\n​创建一个和你用户名相同的仓库，[后面加.github.io](http://XXX.github.io/)，只有这样，将来要部署到GitHub page的时候，才会被识别，[也就是xxxx.github.io](http://XXX.github.io/)，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。\n​回到你的git bash中，\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n这里的`yourname`输入你的`GitHub`用户名，`youremail`输入你`GitHub`的邮箱。这样`GitHub`才能知道你是不是对应它的账户。\n\n可以用以下两条，检查一下你有没有输对\n\n```\ngit config user.name\ngit config user.email\n```\n\n然后创建`SSH`,一路回车\n\n```\nssh-keygen -t rsa -C \"youremail\"\n```\n\n这个时候它会告诉你已经生成了`.ssh`的文件夹。在你的电脑中找到这个文件夹。\n\nssh，简单来讲，就是一个秘钥，其中，`id_rsa`是你这台电脑的私人秘钥，不能给别人看的，`id_rsa.pub`是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n\n而后在`GitHub`的`setting`中，找到`SSH keys`的设置选项，点击`New SSH key `把你的`id_rsa.pub`里面的信息复制进去。\n\n在`git bash`中，查看是否成功\n\n```\nssh -T git@github.com\n```\n\n这一步，我们就可以将hexo和GitHub关联起来，也就是将`hexo`生成的文章部署到GitHub上，打开站点配置文件 `_config.yml`，翻到最后，修改为\nYourgithubName就是你的GitHub账户\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后\n\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 顾名思义，生成静态文章，可以用 `hexo g`缩写\n​`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意`deploy`时可能要你输入`username`和`password`。\n\n过一会儿就可以在`http://yourname.github.io` 这个网站看到你的博客了！！(注意要过一会才会更新)","source":"_posts/hexo+github博客搭建.md","raw":"---\nuuid: 0e63ccb1-4af5-b680-1d1e-c9b4b0cec905\ntitle: hexo+github博客搭建\ndate: 2020-10-18 16:09:54\nlink_c: Hexo\nlink_name: Hexo+GitHub-Blog-Building\ntop: 2002\nmathjax: true\ntags: Hexo\ncategories: Hexo\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\n\n\n## 准备\n\n先下载`git`和`nodejs`，[git](https://git-scm.com/downloads)、[nodejs](https://nodejs.org/en/download/). \n\n注意，`nodejs`用`msi`下载，不要下载`zip`\n\n<!--more-->\n\n打开`git`输入\n\n```\nnode -v\nnpm -v\n```\n\n检查nodejs是否下载好。\n\n若显示\n```\nXX.XX.XX或VXX.XX.XX\n```\n\n即可\n\n然后输入\n\n```\nnpm install -g hexo\n```\n\n等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有`done`没有`error`就行。\n\n## 本地建立\n\n新建一个文件夹，以下用`blog`代替。\n\n右键`blog`，打开`git bush`\n\n输入\n\n```\nhexo init blog\nnpm install\n```\n\n新建完成后，指定文件夹目录下有：\n\n- node_modules: 依赖包\n- public：存放生成的页面\n- scaffolds：生成文章的一些模板\n- source：用来存放你的文章\n- themes：主题\n- _config.yml: 博客的配置文件\n\n`cd进入myblog`\n\n输入\n\n```\nhexo g\nhexo server\n```\n\n打开 [localhost:4000](localhost:4000) 查看\n\n## 网上建立\n首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在`GitHub.com`中看到一个`New repository`，新建仓库。\n​创建一个和你用户名相同的仓库，[后面加.github.io](http://XXX.github.io/)，只有这样，将来要部署到GitHub page的时候，才会被识别，[也就是xxxx.github.io](http://XXX.github.io/)，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。\n​回到你的git bash中，\n\n```\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n这里的`yourname`输入你的`GitHub`用户名，`youremail`输入你`GitHub`的邮箱。这样`GitHub`才能知道你是不是对应它的账户。\n\n可以用以下两条，检查一下你有没有输对\n\n```\ngit config user.name\ngit config user.email\n```\n\n然后创建`SSH`,一路回车\n\n```\nssh-keygen -t rsa -C \"youremail\"\n```\n\n这个时候它会告诉你已经生成了`.ssh`的文件夹。在你的电脑中找到这个文件夹。\n\nssh，简单来讲，就是一个秘钥，其中，`id_rsa`是你这台电脑的私人秘钥，不能给别人看的，`id_rsa.pub`是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n\n而后在`GitHub`的`setting`中，找到`SSH keys`的设置选项，点击`New SSH key `把你的`id_rsa.pub`里面的信息复制进去。\n\n在`git bash`中，查看是否成功\n\n```\nssh -T git@github.com\n```\n\n这一步，我们就可以将hexo和GitHub关联起来，也就是将`hexo`生成的文章部署到GitHub上，打开站点配置文件 `_config.yml`，翻到最后，修改为\nYourgithubName就是你的GitHub账户\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后\n\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 顾名思义，生成静态文章，可以用 `hexo g`缩写\n​`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意`deploy`时可能要你输入`username`和`password`。\n\n过一会儿就可以在`http://yourname.github.io` 这个网站看到你的博客了！！(注意要过一会才会更新)","slug":"hexo+github博客搭建","published":1,"updated":"2021-01-28T12:05:37.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qe9x0001e8b15lfp9cmk","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>先下载<code>git</code>和<code>nodejs</code>，<a href=\"https://git-scm.com/downloads\">git</a>、<a href=\"https://nodejs.org/en/download/\">nodejs</a>. </p>\n<p>注意，<code>nodejs</code>用<code>msi</code>下载，不要下载<code>zip</code></p>\n<a id=\"more\"></a>\n\n<p>打开<code>git</code>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n<p>检查nodejs是否下载好。</p>\n<p>若显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">XX.XX.XX或VXX.XX.XX<br></code></pre></td></tr></table></figure>\n<p>即可</p>\n<p>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo<br></code></pre></td></tr></table></figure>\n<p>等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有<code>done</code>没有<code>error</code>就行。</p>\n<h2 id=\"本地建立\"><a href=\"#本地建立\" class=\"headerlink\" title=\"本地建立\"></a>本地建立</h2><p>新建一个文件夹，以下用<code>blog</code>代替。</p>\n<p>右键<code>blog</code>，打开<code>git bush</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo init blog<br>npm install<br></code></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹目录下有：</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n</ul>\n<p><code>cd进入myblog</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo g<br>hexo server<br></code></pre></td></tr></table></figure>\n<p>打开 <a href=\"localhost:4000\">localhost:4000</a> 查看</p>\n<h2 id=\"网上建立\"><a href=\"#网上建立\" class=\"headerlink\" title=\"网上建立\"></a>网上建立</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在<code>GitHub.com</code>中看到一个<code>New repository</code>，新建仓库。<br>​创建一个和你用户名相同的仓库，<a href=\"http://xxx.github.io/\">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href=\"http://xxx.github.io/\">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br>​回到你的git bash中，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config --global user.name &quot;yourname&quot;<br>git config --global user.email &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n<p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure>\n<p>然后创建<code>SSH</code>,一路回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh-keygen -t rsa -C &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。</p>\n<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>\n<p>而后在<code>GitHub</code>的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key </code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在<code>git bash</code>中，查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n<p>这一步，我们就可以将hexo和GitHub关联起来，也就是将<code>hexo</code>生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br>​<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p>\n<p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！(注意要过一会才会更新)</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>先下载<code>git</code>和<code>nodejs</code>，<a href=\"https://git-scm.com/downloads\">git</a>、<a href=\"https://nodejs.org/en/download/\">nodejs</a>. </p>\n<p>注意，<code>nodejs</code>用<code>msi</code>下载，不要下载<code>zip</code></p>","more":"<p>打开<code>git</code>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n<p>检查nodejs是否下载好。</p>\n<p>若显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">XX.XX.XX或VXX.XX.XX<br></code></pre></td></tr></table></figure>\n<p>即可</p>\n<p>然后输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo<br></code></pre></td></tr></table></figure>\n<p>等待5-30分钟，看网速。好了之后会看到一大堆乱七八糟的东西，不用管，只要有<code>done</code>没有<code>error</code>就行。</p>\n<h2 id=\"本地建立\"><a href=\"#本地建立\" class=\"headerlink\" title=\"本地建立\"></a>本地建立</h2><p>新建一个文件夹，以下用<code>blog</code>代替。</p>\n<p>右键<code>blog</code>，打开<code>git bush</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo init blog<br>npm install<br></code></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹目录下有：</p>\n<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n</ul>\n<p><code>cd进入myblog</code></p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo g<br>hexo server<br></code></pre></td></tr></table></figure>\n<p>打开 <a href=\"localhost:4000\">localhost:4000</a> 查看</p>\n<h2 id=\"网上建立\"><a href=\"#网上建立\" class=\"headerlink\" title=\"网上建立\"></a>网上建立</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。注册完登录后，在<code>GitHub.com</code>中看到一个<code>New repository</code>，新建仓库。<br>​创建一个和你用户名相同的仓库，<a href=\"http://xxx.github.io/\">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href=\"http://xxx.github.io/\">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。<br>​回到你的git bash中，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config --global user.name &quot;yourname&quot;<br>git config --global user.email &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n<p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p>\n<p>可以用以下两条，检查一下你有没有输对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure>\n<p>然后创建<code>SSH</code>,一路回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh-keygen -t rsa -C &quot;youremail&quot;<br></code></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。</p>\n<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>\n<p>而后在<code>GitHub</code>的<code>setting</code>中，找到<code>SSH keys</code>的设置选项，点击<code>New SSH key </code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>\n<p>在<code>git bash</code>中，查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n<p>这一步，我们就可以将hexo和GitHub关联起来，也就是将<code>hexo</code>生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>  type: git<br>  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br>​<code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p>\n<p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！(注意要过一会才会更新)</p>"},{"title":"hexo 主题 添加 mathjax","mathjax":true,"date":"2021-01-02T09:16:47.000Z","link_c":"Hexo","link_name":"Mathjax","top":2001,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\n$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$\n\n<!-- more -->\n\n首先，\n```\nnpm uninstall hexo-renderer-marked\n```\n\n然后\n```\nnpm install hexo-renderer-markdown-it\nnpm install hexo-renderer-kramed --save\n```\n\n最后，新建$layout/$_$markdown/mathjax.ejs:$\n\n```ejs\n<script>\n    if (typeof MathJax === 'undefined') {\n      window.MathJax = {\n        loader: {\n          source: {\n            '[tex]/amsCd': '[tex]/amscd',\n            '[tex]/AMScd': '[tex]/amscd'\n          }\n        },\n        tex: {\n          inlineMath: {'[+]': [['$', '$']]},\n          tags: 'ams'\n        },\n        options: {\n          renderActions: {\n            findScript: [10, doc => {\n              document.querySelectorAll('script[type^=\"math/tex\"]').forEach(node => {\n                const display = !!node.type.match(/; *mode=display/);\n                const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);\n                const text = document.createTextNode('');\n                node.parentNode.replaceChild(text, node);\n                math.start = {node: text, delim: '', n: 0};\n                math.end = {node: text, delim: '', n: 0};\n                doc.math.push(math);\n              });\n            }, '', false],\n            insertedScript: [200, () => {\n              document.querySelectorAll('mjx-container').forEach(node => {\n                let target = node.parentNode;\n                if (target.nodeName.toLowerCase() === 'li') {\n                  target.parentNode.classList.add('has-jax');\n                }\n              });\n            }, '', false]\n          }\n        }\n      };\n      (function () {\n        var script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3.0/es5/tex-mml-chtml.js';\n        script.defer = true;\n        document.head.appendChild(script);\n      })();\n    } else {\n      MathJax.startup.document.state(0);\n      MathJax.texReset();\n      MathJax.typeset();\n    }\n  </script>\n```\n\n","source":"_posts/hexo主题添加 mathjax.md","raw":"---\ntitle: hexo 主题 添加 mathjax\nmathjax: true\ndate: 2021-01-02 17:16:47\nlink_c: Hexo\nlink_name: Mathjax\ntop: 2001\ntags: Hexo\ncategories: Hexo\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\n$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$\n\n<!-- more -->\n\n首先，\n```\nnpm uninstall hexo-renderer-marked\n```\n\n然后\n```\nnpm install hexo-renderer-markdown-it\nnpm install hexo-renderer-kramed --save\n```\n\n最后，新建$layout/$_$markdown/mathjax.ejs:$\n\n```ejs\n<script>\n    if (typeof MathJax === 'undefined') {\n      window.MathJax = {\n        loader: {\n          source: {\n            '[tex]/amsCd': '[tex]/amscd',\n            '[tex]/AMScd': '[tex]/amscd'\n          }\n        },\n        tex: {\n          inlineMath: {'[+]': [['$', '$']]},\n          tags: 'ams'\n        },\n        options: {\n          renderActions: {\n            findScript: [10, doc => {\n              document.querySelectorAll('script[type^=\"math/tex\"]').forEach(node => {\n                const display = !!node.type.match(/; *mode=display/);\n                const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);\n                const text = document.createTextNode('');\n                node.parentNode.replaceChild(text, node);\n                math.start = {node: text, delim: '', n: 0};\n                math.end = {node: text, delim: '', n: 0};\n                doc.math.push(math);\n              });\n            }, '', false],\n            insertedScript: [200, () => {\n              document.querySelectorAll('mjx-container').forEach(node => {\n                let target = node.parentNode;\n                if (target.nodeName.toLowerCase() === 'li') {\n                  target.parentNode.classList.add('has-jax');\n                }\n              });\n            }, '', false]\n          }\n        }\n      };\n      (function () {\n        var script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3.0/es5/tex-mml-chtml.js';\n        script.defer = true;\n        document.head.appendChild(script);\n      })();\n    } else {\n      MathJax.startup.document.state(0);\n      MathJax.texReset();\n      MathJax.typeset();\n    }\n  </script>\n```\n\n","slug":"hexo主题添加 mathjax","published":1,"updated":"2021-01-28T12:05:32.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qea00003e8b1dfusely6","content":"<p>$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$</p>\n<a id=\"more\"></a>\n\n<p>首先，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm uninstall hexo-renderer-marked<br></code></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-renderer-markdown-it<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure>\n<p>最后，新建$layout/$_$markdown/mathjax.ejs:$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;script&gt;<br>    if (typeof MathJax &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;<br>      window.MathJax &#x3D; &#123;<br>        loader: &#123;<br>          source: &#123;<br>            &#39;[tex]&#x2F;amsCd&#39;: &#39;[tex]&#x2F;amscd&#39;,<br>            &#39;[tex]&#x2F;AMScd&#39;: &#39;[tex]&#x2F;amscd&#39;<br>          &#125;<br>        &#125;,<br>        tex: &#123;<br>          inlineMath: &#123;&#39;[+]&#39;: [[&#39;$&#39;, &#39;$&#39;]]&#125;,<br>          tags: &#39;ams&#39;<br>        &#125;,<br>        options: &#123;<br>          renderActions: &#123;<br>            findScript: [10, doc &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;script[type^&#x3D;&quot;math&#x2F;tex&quot;]&#39;).forEach(node &#x3D;&gt; &#123;<br>                const display &#x3D; !!node.type.match(&#x2F;; *mode&#x3D;display&#x2F;);<br>                const math &#x3D; new doc.options.MathItem(node.textContent, doc.inputJax[0], display);<br>                const text &#x3D; document.createTextNode(&#39;&#39;);<br>                node.parentNode.replaceChild(text, node);<br>                math.start &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                math.end &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                doc.math.push(math);<br>              &#125;);<br>            &#125;, &#39;&#39;, false],<br>            insertedScript: [200, () &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;mjx-container&#39;).forEach(node &#x3D;&gt; &#123;<br>                let target &#x3D; node.parentNode;<br>                if (target.nodeName.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;li&#39;) &#123;<br>                  target.parentNode.classList.add(&#39;has-jax&#39;);<br>                &#125;<br>              &#125;);<br>            &#125;, &#39;&#39;, false]<br>          &#125;<br>        &#125;<br>      &#125;;<br>      (function () &#123;<br>        var script &#x3D; document.createElement(&#39;script&#39;);<br>        script.src &#x3D; &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@3.0&#x2F;es5&#x2F;tex-mml-chtml.js&#39;;<br>        script.defer &#x3D; true;<br>        document.head.appendChild(script);<br>      &#125;)();<br>    &#125; else &#123;<br>      MathJax.startup.document.state(0);<br>      MathJax.texReset();<br>      MathJax.typeset();<br>    &#125;<br>  &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<p>$hexo$自带的$markdown$不支持$mathjax$,因此我们要添加$mathjax$</p>","more":"<p>首先，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm uninstall hexo-renderer-marked<br></code></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-renderer-markdown-it<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure>\n<p>最后，新建$layout/$_$markdown/mathjax.ejs:$</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;script&gt;<br>    if (typeof MathJax &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) &#123;<br>      window.MathJax &#x3D; &#123;<br>        loader: &#123;<br>          source: &#123;<br>            &#39;[tex]&#x2F;amsCd&#39;: &#39;[tex]&#x2F;amscd&#39;,<br>            &#39;[tex]&#x2F;AMScd&#39;: &#39;[tex]&#x2F;amscd&#39;<br>          &#125;<br>        &#125;,<br>        tex: &#123;<br>          inlineMath: &#123;&#39;[+]&#39;: [[&#39;$&#39;, &#39;$&#39;]]&#125;,<br>          tags: &#39;ams&#39;<br>        &#125;,<br>        options: &#123;<br>          renderActions: &#123;<br>            findScript: [10, doc &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;script[type^&#x3D;&quot;math&#x2F;tex&quot;]&#39;).forEach(node &#x3D;&gt; &#123;<br>                const display &#x3D; !!node.type.match(&#x2F;; *mode&#x3D;display&#x2F;);<br>                const math &#x3D; new doc.options.MathItem(node.textContent, doc.inputJax[0], display);<br>                const text &#x3D; document.createTextNode(&#39;&#39;);<br>                node.parentNode.replaceChild(text, node);<br>                math.start &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                math.end &#x3D; &#123;node: text, delim: &#39;&#39;, n: 0&#125;;<br>                doc.math.push(math);<br>              &#125;);<br>            &#125;, &#39;&#39;, false],<br>            insertedScript: [200, () &#x3D;&gt; &#123;<br>              document.querySelectorAll(&#39;mjx-container&#39;).forEach(node &#x3D;&gt; &#123;<br>                let target &#x3D; node.parentNode;<br>                if (target.nodeName.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;li&#39;) &#123;<br>                  target.parentNode.classList.add(&#39;has-jax&#39;);<br>                &#125;<br>              &#125;);<br>            &#125;, &#39;&#39;, false]<br>          &#125;<br>        &#125;<br>      &#125;;<br>      (function () &#123;<br>        var script &#x3D; document.createElement(&#39;script&#39;);<br>        script.src &#x3D; &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@3.0&#x2F;es5&#x2F;tex-mml-chtml.js&#39;;<br>        script.defer &#x3D; true;<br>        document.head.appendChild(script);<br>      &#125;)();<br>    &#125; else &#123;<br>      MathJax.startup.document.state(0);<br>      MathJax.texReset();<br>      MathJax.typeset();<br>    &#125;<br>  &lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>"},{"title":"从 0 开始制作 Hexo 博客主题","date":"2020-10-26T12:01:32.000Z","link_c":"Hexo","link_name":"Theme-Made-By-Myself","top":2002,"mathjax":true,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\n## 写在前面\n本文将会从零开始开发一个简单的博客主题。样式主要参考 `Hexo theme` 中的 `Noise` 主题。\n\n<!-- More -->\n\n开始之前你需要了解：\n- 模板引擎 ejs官网\n- CSS预处理器\n- Hexo 文档\n\n本文使用的模板引擎为 `ejs`，使用的 CSS 预处理器为 `stylus`。这也是 `hexo` 项目预装了的 `render` 插件，如果想使用其他模板引擎或者其他 `CSS` 预处理器，可以安装相对应的 `render` 插件。例如我的 `Even` 主题使用的是 `Swig` 与 `SCSS`。\n目录结构\n主题目录结构以自带的 `landscape` 主题为例：\n.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n我们在 themes 中新建 `theme-example` 文件夹，然后在 `theme-demo` 中按照 `landscape` 主题的目录结构新建 `languages`，`layout`，`scripts` 与 source 文件夹。\n## 创建布局模板\n在 `layout` 中创建 `index.ejs` 文件，首页将会使用该布局模板生成 HTML 文件。\n`layout/index.ejs:`\n```ejs\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello Word</h1>\n  </body>\n</html>\n```\n修改站点配置文件中的主题配置，使用我们刚刚创建的 `theme-example` 主题：\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n```\n## 运行\n`hexo clean`   清除`public`静态文件\n`hexo generate` 生成`public`静态文件\n`hexo server --debug` 以 `debug` 模式开启 `Hexo` 本地服务器预览，访问 http://localhost:4000/。\n\n![](http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg)\n\n## 写作\n在工作文件夹中执行这条命令来新建一篇文章，`title`即为文章的标题。\n```\nhexo new <title>　　\n```\n终端会返回一条信息，告诉你文章源文件存放在哪里：\n\n![](https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png)\n\n## 添加页面导航\n现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 `layout` 中创建共用的布局文件 `layout.ejs`， 同时创建 `_partial/head.ejs` 保存 HTML 的 `head` 以及创建 `_partial/header.ejs` 文件，编写页面导航部分。\n`layout/layout.ejs:`\n```ejs\n<!DOCTYPE html>\n<html>\n  <%- partial('_partial/head') %>\n  <body>\n    <%- partial('_partial/header') %>\n    <main class=\"main\">\n      <%- body %>\n    </main>\n  </body>\n</html>\n```\n`layout.ejs` 文件通过 `partial()` 函数来包含其他文件，使得我们能够更好的组织代码。详见 `Templates | Hexo`。\n`layout/_partial/head.ejs:`\n```ejs\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n</head>\n```\n这里使用了 `config` 变量，该变量包含的是站点配置（即站点根目录下 `_config.yml` 中的配置）。除此之外，`Hexo` 还提供了许多变量可在模板中使用，详见 `Variables | Hexo`。\n`layout/_partial/header.ejs:`\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <li class=\"menu-item\">\n        <a href=\"/\" class=\"menu-item-link\">Home</a>\n      </li>\n      <li class=\"menu-item\">\n        <a href=\"/archives\" class=\"menu-item-link\">Archive</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n```\n接着我们清空 `index.ejs` 中的内容，并添加 `<h2>Hello World</h2>`。在 `layout` 目录下的 `index.ejs` 会自动继承 `layout.ejs`，并将其中的内容填入 `<%- body %>` 的位置。我们将得到一个有导航菜单的 `Hello World` 页面。\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg)\n\n## 添加主题配置文件\n实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 `thmem-demo` 下新建主题的配置文件 `_config.yml`，在其中添加需要配置的字段。然后可以通过`theme`这个变量来拿到该配置文件中的配置。\n`theme-demo/_config.yml:`\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n```\n这样我们就可以在 `header.ejs` 中使用 `theme.menu` 获取到导航菜单的设置。将 `header.ejs` 修改为：\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%= name %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 `Github` 的链接：\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n```\n除此之外还可以添加其他需要的配置，例如 `RSS`，评论等等。\n## 添加首页文章列表\n接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 `Hexo` 提供了各种有用的变量，在这里将会使用到 `page` 这个变量。`page` 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看[这里](https://hexo.io/docs/variables.html#Page-Variables)。\n那么这里我们会使用 `page` 变量的 `posts` 属性拿到文章数据的集合。编辑 `index.ejs` 文件：\n```ejs\n<section class=\"posts\">\n  <% page.posts.each(function (post) { %>\n    <article class=\"post\">\n      <div class=\"post-title\">\n        <a class=\"post-title-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </div>\n      <div class=\"post-content\">\n        <%- post.content %>\n      </div>\n      <div class=\"post-meta\">\n        <span class=\"post-time\"><%- date(post.date, \"YYYY-MM-DD\") %></span>\n      </div>\n    </article>\n  <% }) %>\n</section>\n```\n从 `page.posts` 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 `date()` 函数，这是 `Hexo` 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 `Hexo` 的辅助函数。\n## 文章摘录\n由于首页显示文章内容时使用的是 `post.content`，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。\n`Hexo` 提供了 `excerpt` 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 `<!-- more -->` 标记。添加了这个标记之后，`post.excerpt` 将会获取到标记之前的内容。如果没有这个标记，那么 `post.excerpt` 会是空的。所以我们可以把首页文章内容部分的 `post.content` 替换成 `post.excerpt`。\n```ejs\n<div class=\"post-content\">\n  <%- post.excerpt %>\n</div>\n```\n## 添加页面样式\n到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 `source` 文件中创建一个 `css` 文件夹来存放样式文件。\n由于 `Hexo` 在新建项目的时候会安装 `hexo-renderer-stylus` 这个插件，所以我们无需其他步骤，只需要将样式文件放到 `css` 文件夹中。`Hexo` 在生成页面的时候会将 `source` 中的所有文件复制到生成的 `public` 文件中，并且在此之前会编译 `styl` 为 `css` 文件。\n在 `css` 文件夹中创建 `style.styl`，编写一些基础的样式，并把所有样式 `import` 到这个文件。所以最终编译之后只会有 `style.css` 一个文件。创建 `_partial/header.styl` 与 `_partial/post.style` 存放页面导航以及文章的样式，并且在 `style.styl` 中 `import` 这两个文件。\n`_partial/header.styl:`\n```css\n.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n```\n`_partial/post.styl:`\n```css\n.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n```\n`style.styl:`\n```css\nbody {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n```\n最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 `css():`\n`layout/_partial/head.ejs:`\n```ejs\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n  <%- css('css/style.css') %>\n</head>\n```\n至此，我们会看到站点的首页是这个样子的：\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg)\n\n## 添加分页\n在站点的 `source/_post/` 目录下存放的是我们的文章，现在我们把原本的 `hello-world.md` 复制黏贴 `10+` 次，再查看站点首页。会发现，首页只显示了 `10` 篇文章。\n首页显示的文章数量我们可以通过站点配置文件中的 `per_page` 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。\n新建 `_partial/paginator.ejs:`\n```ejs\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo; Prev\",\n      next_text: \"Next &raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n在 `index.ejs` 中添加这个文件的内容：\n```js\n...\n</section>\n<%- paginator('_partial/paginator') %>\n```\n这里我们使用到了另外的一个辅助函数 `paginator`，它能够帮助我们插入分页链接。\n添加文章详情页\n文章详情页对应的布局文件是 `post.ejs`，新建 `post.ejs:`\n```ejs\n<article class=\"post\">\n  <div class=\"post-title\">\n    <h2 class=\"title\"><%= page.title %></h2>\n  </div>\n   <div class=\"post-meta\">\n    <span class=\"post-time\"><%- date(page.date, \"YYYY-MM-DD\") %></span>\n  </div>\n  <div class=\"post-content\">\n    <%- page.content %>\n  </div>\n</article>\n```\n由于这里是文章的模板，所以变量 `page` 表示的是文章的数据，而不是首页的文章数据集合。\n## 添加归档页\n创建归档页使用的模板文件 `archive.ejs:`\n```ejs\n<section class=\"archive\">\n  <ul class=\"post-archive\">\n    <% page.posts.each(function (post) { %>\n      <li class=\"post-item\">\n        <span class=\"post-date\"><%= date(post.date, \"YYYY-MM-DD\") %></span>\n        <a class=\"post-title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </li>\n    <% }) %>\n  </ul>\n</section>\n<%- partial('_partial/paginator') %>\n```\n其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：\n`css/_partial/archive.styl:`\n```css\n.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n```\n## 国际化\n还记得我们一开始创建的 `languages` 文件夹吗？没错，它是用来添加多种语言，用于 `i18n` 的。站点的语言设置为站点配置文件中的 `language`。\n当该字段为空时，默认使用的是 `languages/default.yml` 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：\n```yml\nMenu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n```\n目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 `header.ejs` 与 `paginator.ejs` 这两个文件：\n`_partial/header.ejs`\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%- __('Menu.' + name) %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n`_partial/paginator.ejs:`\n```ejs\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：\n`languages/zh-CN.yml`\n```yml\nMenu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n```\n然后我们将站点配置文件中的 `language` 字段修改为 `zh-CN`（与 `zh-CN.yml` 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。\n## hexo函数\n```ejs\n<%- __('Menu.' + name) %>\n```\n__下划线函数在 `hexo` 变量 可以查看 `Lodash` 函数，专门用于`json`取值\n最后总结\n如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 `Hexo` 主题有了一定的了解。其实说白了，`Hexo` 就是把那些 `Markdown` 文件按照不同的布局模板，填上对应的数据生成 `HTML` 页面，复制 `source` 中的到生成的 `public` 文件夹中，中间过程会把需要编译的 `stylus/less/sass` 等文件编译。\n本文并没有提及有关页面 `JavaScript` 的部分，实际上与写 `CSS` 样式相同。在 `source/js` 中写 `JavaScript` 脚本，然后在模板中引入即可。\n感谢阅读，希望对你有所帮助。","source":"_posts/从 0 开始制作 Hexo 博客主题.md","raw":"---\ntitle: '从 0 开始制作 Hexo 博客主题'\ndate: 2020-10-26 20:01:32\nlink_c: Hexo\nlink_name: Theme-Made-By-Myself\ntop: 2002\nmathjax: true\ntags: Hexo\ncategories: Hexo\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\n## 写在前面\n本文将会从零开始开发一个简单的博客主题。样式主要参考 `Hexo theme` 中的 `Noise` 主题。\n\n<!-- More -->\n\n开始之前你需要了解：\n- 模板引擎 ejs官网\n- CSS预处理器\n- Hexo 文档\n\n本文使用的模板引擎为 `ejs`，使用的 CSS 预处理器为 `stylus`。这也是 `hexo` 项目预装了的 `render` 插件，如果想使用其他模板引擎或者其他 `CSS` 预处理器，可以安装相对应的 `render` 插件。例如我的 `Even` 主题使用的是 `Swig` 与 `SCSS`。\n目录结构\n主题目录结构以自带的 `landscape` 主题为例：\n.\n├── languages  语言文件，用于国际化\n├── layout     页面模板文件\n├── scripts    Hexo 脚本\n└── source     主题资源文件，包括页面样式，脚本，字体等\n我们在 themes 中新建 `theme-example` 文件夹，然后在 `theme-demo` 中按照 `landscape` 主题的目录结构新建 `languages`，`layout`，`scripts` 与 source 文件夹。\n## 创建布局模板\n在 `layout` 中创建 `index.ejs` 文件，首页将会使用该布局模板生成 HTML 文件。\n`layout/index.ejs:`\n```ejs\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Hello Word</h1>\n  </body>\n</html>\n```\n修改站点配置文件中的主题配置，使用我们刚刚创建的 `theme-example` 主题：\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: theme-example\n```\n## 运行\n`hexo clean`   清除`public`静态文件\n`hexo generate` 生成`public`静态文件\n`hexo server --debug` 以 `debug` 模式开启 `Hexo` 本地服务器预览，访问 http://localhost:4000/。\n\n![](http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg)\n\n## 写作\n在工作文件夹中执行这条命令来新建一篇文章，`title`即为文章的标题。\n```\nhexo new <title>　　\n```\n终端会返回一条信息，告诉你文章源文件存放在哪里：\n\n![](https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png)\n\n## 添加页面导航\n现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 `layout` 中创建共用的布局文件 `layout.ejs`， 同时创建 `_partial/head.ejs` 保存 HTML 的 `head` 以及创建 `_partial/header.ejs` 文件，编写页面导航部分。\n`layout/layout.ejs:`\n```ejs\n<!DOCTYPE html>\n<html>\n  <%- partial('_partial/head') %>\n  <body>\n    <%- partial('_partial/header') %>\n    <main class=\"main\">\n      <%- body %>\n    </main>\n  </body>\n</html>\n```\n`layout.ejs` 文件通过 `partial()` 函数来包含其他文件，使得我们能够更好的组织代码。详见 `Templates | Hexo`。\n`layout/_partial/head.ejs:`\n```ejs\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n</head>\n```\n这里使用了 `config` 变量，该变量包含的是站点配置（即站点根目录下 `_config.yml` 中的配置）。除此之外，`Hexo` 还提供了许多变量可在模板中使用，详见 `Variables | Hexo`。\n`layout/_partial/header.ejs:`\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <li class=\"menu-item\">\n        <a href=\"/\" class=\"menu-item-link\">Home</a>\n      </li>\n      <li class=\"menu-item\">\n        <a href=\"/archives\" class=\"menu-item-link\">Archive</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n```\n接着我们清空 `index.ejs` 中的内容，并添加 `<h2>Hello World</h2>`。在 `layout` 目录下的 `index.ejs` 会自动继承 `layout.ejs`，并将其中的内容填入 `<%- body %>` 的位置。我们将得到一个有导航菜单的 `Hello World` 页面。\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg)\n\n## 添加主题配置文件\n实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 `thmem-demo` 下新建主题的配置文件 `_config.yml`，在其中添加需要配置的字段。然后可以通过`theme`这个变量来拿到该配置文件中的配置。\n`theme-demo/_config.yml:`\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n```\n这样我们就可以在 `header.ejs` 中使用 `theme.menu` 获取到导航菜单的设置。将 `header.ejs` 修改为：\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%= name %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 `Github` 的链接：\n```yml\nmenu:\n  Home: /\n  Archives: /archives\n  Github: https://github.com/ahonn\n```\n除此之外还可以添加其他需要的配置，例如 `RSS`，评论等等。\n## 添加首页文章列表\n接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 `Hexo` 提供了各种有用的变量，在这里将会使用到 `page` 这个变量。`page` 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看[这里](https://hexo.io/docs/variables.html#Page-Variables)。\n那么这里我们会使用 `page` 变量的 `posts` 属性拿到文章数据的集合。编辑 `index.ejs` 文件：\n```ejs\n<section class=\"posts\">\n  <% page.posts.each(function (post) { %>\n    <article class=\"post\">\n      <div class=\"post-title\">\n        <a class=\"post-title-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </div>\n      <div class=\"post-content\">\n        <%- post.content %>\n      </div>\n      <div class=\"post-meta\">\n        <span class=\"post-time\"><%- date(post.date, \"YYYY-MM-DD\") %></span>\n      </div>\n    </article>\n  <% }) %>\n</section>\n```\n从 `page.posts` 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 `date()` 函数，这是 `Hexo` 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 `Hexo` 的辅助函数。\n## 文章摘录\n由于首页显示文章内容时使用的是 `post.content`，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。\n`Hexo` 提供了 `excerpt` 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 `<!-- more -->` 标记。添加了这个标记之后，`post.excerpt` 将会获取到标记之前的内容。如果没有这个标记，那么 `post.excerpt` 会是空的。所以我们可以把首页文章内容部分的 `post.content` 替换成 `post.excerpt`。\n```ejs\n<div class=\"post-content\">\n  <%- post.excerpt %>\n</div>\n```\n## 添加页面样式\n到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 `source` 文件中创建一个 `css` 文件夹来存放样式文件。\n由于 `Hexo` 在新建项目的时候会安装 `hexo-renderer-stylus` 这个插件，所以我们无需其他步骤，只需要将样式文件放到 `css` 文件夹中。`Hexo` 在生成页面的时候会将 `source` 中的所有文件复制到生成的 `public` 文件中，并且在此之前会编译 `styl` 为 `css` 文件。\n在 `css` 文件夹中创建 `style.styl`，编写一些基础的样式，并把所有样式 `import` 到这个文件。所以最终编译之后只会有 `style.css` 一个文件。创建 `_partial/header.styl` 与 `_partial/post.style` 存放页面导航以及文章的样式，并且在 `style.styl` 中 `import` 这两个文件。\n`_partial/header.styl:`\n```css\n.header {\n  margin-top: 2em\n  display: flex\n  align-items: baseline\n  justify-content: space-between\n\n  .blog-title .logo {\n    color: #AAA;\n    font-size: 2em;\n    font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif;\n    text-decoration: none;\n  }\n\n  .menu {\n    margin: 0;\n    padding: 0;\n\n    .menu-item {\n      display: inline-block;\n      margin-right: 10px;\n    }\n\n    .menu-item-link {\n      color: #AAA;\n      text-decoration: none;\n\n      &:hover {\n        color: #368CCB;\n      }\n    }\n  }\n}\n```\n`_partial/post.styl:`\n```css\n.post {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n}\n\n.posts  {\n  .post:first-child {\n    margin-top: 0;\n  }\n\n  .post-title {\n    font-size: 1.5em;\n\n    .post-title-link {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-content {\n    a {\n      color: #368CCB;\n      text-decoration: none;\n    }\n  }\n\n  .post-meta {\n    color: #BABABA;\n  }\n}\n```\n`style.styl:`\n```css\nbody {\n  background-color: #F2F2F2;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n@import \"_partial/header\";\n@import \"_partial/post\";\n```\n最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 `css():`\n`layout/_partial/head.ejs:`\n```ejs\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n  <title><%= config.title %></title>\n  <%- css('css/style.css') %>\n</head>\n```\n至此，我们会看到站点的首页是这个样子的：\n\n![](http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg)\n\n## 添加分页\n在站点的 `source/_post/` 目录下存放的是我们的文章，现在我们把原本的 `hello-world.md` 复制黏贴 `10+` 次，再查看站点首页。会发现，首页只显示了 `10` 篇文章。\n首页显示的文章数量我们可以通过站点配置文件中的 `per_page` 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。\n新建 `_partial/paginator.ejs:`\n```ejs\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo; Prev\",\n      next_text: \"Next &raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n在 `index.ejs` 中添加这个文件的内容：\n```js\n...\n</section>\n<%- paginator('_partial/paginator') %>\n```\n这里我们使用到了另外的一个辅助函数 `paginator`，它能够帮助我们插入分页链接。\n添加文章详情页\n文章详情页对应的布局文件是 `post.ejs`，新建 `post.ejs:`\n```ejs\n<article class=\"post\">\n  <div class=\"post-title\">\n    <h2 class=\"title\"><%= page.title %></h2>\n  </div>\n   <div class=\"post-meta\">\n    <span class=\"post-time\"><%- date(page.date, \"YYYY-MM-DD\") %></span>\n  </div>\n  <div class=\"post-content\">\n    <%- page.content %>\n  </div>\n</article>\n```\n由于这里是文章的模板，所以变量 `page` 表示的是文章的数据，而不是首页的文章数据集合。\n## 添加归档页\n创建归档页使用的模板文件 `archive.ejs:`\n```ejs\n<section class=\"archive\">\n  <ul class=\"post-archive\">\n    <% page.posts.each(function (post) { %>\n      <li class=\"post-item\">\n        <span class=\"post-date\"><%= date(post.date, \"YYYY-MM-DD\") %></span>\n        <a class=\"post-title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      </li>\n    <% }) %>\n  </ul>\n</section>\n<%- partial('_partial/paginator') %>\n```\n其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：\n`css/_partial/archive.styl:`\n```css\n.archive {\n  margin: 1em auto;\n  padding: 30px 50px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  box-shadow: 0 0 2px #ddd;\n\n  .post-archive {\n    list-style: none;\n    padding: 0;\n\n    .post-item {\n      margin: 5px 0;\n\n      .post-date {\n        display: inline-block;\n        margin-right: 10px;\n        color: #BABABA;\n      }\n\n      .post-title {\n        color: #368CCB;\n        text-decoration: none;\n      }\n    }\n  }\n}\n```\n## 国际化\n还记得我们一开始创建的 `languages` 文件夹吗？没错，它是用来添加多种语言，用于 `i18n` 的。站点的语言设置为站点配置文件中的 `language`。\n当该字段为空时，默认使用的是 `languages/default.yml` 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：\n```yml\nMenu:\n  Home: Home\n  Archives: Archives\n  Github: Github\n\nPaginator:\n  Prev: Prev\n  Next: Next\n```\n目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 `header.ejs` 与 `paginator.ejs` 这两个文件：\n`_partial/header.ejs`\n```ejs\n<header class=\"header\">\n  <div class=\"blog-title\">\n    <a href=\"<%- url_for() %>\" class=\"logo\"><%= config.title %></a>\n  </div>\n  <nav class=\"navbar\">\n    <ul class=\"menu\">\n      <% for (name in theme.menu) { %>\n        <li class=\"menu-item\">\n          <a href=\"<%- url_for(theme.menu[name]) %>\" class=\"menu-item-link\"><%- __('Menu.' + name) %></a>\n        </li>\n      <% } %>\n    </ul>\n  </nav>\n</header>\n```\n`_partial/paginator.ejs:`\n```ejs\n<% if (page.total > 1){ %>\n  <nav class=\"page-nav\">\n    <%- paginator({\n      prev_text: \"&laquo;\" + __('Paginator.Prev'),\n      next_text: __('Paginator.Next') + \"&raquo;\"\n    }) %>\n  </nav>\n<% } %>\n```\n修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：\n`languages/zh-CN.yml`\n```yml\nMenu:\n  Home: 首页\n  Archives: 归档\n  Github: 交友\n\nPaginator:\n  Prev: 上一页\n  Next: 下一页\n```\n然后我们将站点配置文件中的 `language` 字段修改为 `zh-CN`（与 `zh-CN.yml` 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。\n## hexo函数\n```ejs\n<%- __('Menu.' + name) %>\n```\n__下划线函数在 `hexo` 变量 可以查看 `Lodash` 函数，专门用于`json`取值\n最后总结\n如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 `Hexo` 主题有了一定的了解。其实说白了，`Hexo` 就是把那些 `Markdown` 文件按照不同的布局模板，填上对应的数据生成 `HTML` 页面，复制 `source` 中的到生成的 `public` 文件夹中，中间过程会把需要编译的 `stylus/less/sass` 等文件编译。\n本文并没有提及有关页面 `JavaScript` 的部分，实际上与写 `CSS` 样式相同。在 `source/js` 中写 `JavaScript` 脚本，然后在模板中引入即可。\n感谢阅读，希望对你有所帮助。","slug":"从 0 开始制作 Hexo 博客主题","published":1,"updated":"2021-01-28T12:05:41.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qea30007e8b1cej35fjb","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <code>Hexo theme</code> 中的 <code>Noise</code> 主题。</p>\n<a id=\"more\"></a>\n\n<p>开始之前你需要了解：</p>\n<ul>\n<li>模板引擎 ejs官网</li>\n<li>CSS预处理器</li>\n<li>Hexo 文档</li>\n</ul>\n<p>本文使用的模板引擎为 <code>ejs</code>，使用的 CSS 预处理器为 <code>stylus</code>。这也是 <code>hexo</code> 项目预装了的 <code>render</code> 插件，如果想使用其他模板引擎或者其他 <code>CSS</code> 预处理器，可以安装相对应的 <code>render</code> 插件。例如我的 <code>Even</code> 主题使用的是 <code>Swig</code> 与 <code>SCSS</code>。<br>目录结构<br>主题目录结构以自带的 <code>landscape</code> 主题为例：<br>.<br>├── languages  语言文件，用于国际化<br>├── layout     页面模板文件<br>├── scripts    Hexo 脚本<br>└── source     主题资源文件，包括页面样式，脚本，字体等<br>我们在 themes 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-demo</code> 中按照 <code>landscape</code> 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 source 文件夹。</p>\n<h2 id=\"创建布局模板\"><a href=\"#创建布局模板\" class=\"headerlink\" title=\"创建布局模板\"></a>创建布局模板</h2><p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。<br><code>layout/index.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>    &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>    &lt;title&gt;Home&lt;&#x2F;title&gt;<br>  &lt;&#x2F;head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Hello Word&lt;&#x2F;h1&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>\n<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">theme-example</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p><code>hexo clean</code>   清除<code>public</code>静态文件<br><code>hexo generate</code> 生成<code>public</code>静态文件<br><code>hexo server --debug</code> 以 <code>debug</code> 模式开启 <code>Hexo</code> 本地服务器预览，访问 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg\"></p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>在工作文件夹中执行这条命令来新建一篇文章，<code>title</code>即为文章的标题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo new &lt;title&gt;　　<br></code></pre></td></tr></table></figure>\n<p>终端会返回一条信息，告诉你文章源文件存放在哪里：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png\"></p>\n<h2 id=\"添加页面导航\"><a href=\"#添加页面导航\" class=\"headerlink\" title=\"添加页面导航\"></a>添加页面导航</h2><p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 <code>head</code> 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。<br><code>layout/layout.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;%- partial(&#39;_partial&#x2F;head&#39;) %&gt;<br>  &lt;body&gt;<br>    &lt;%- partial(&#39;_partial&#x2F;header&#39;) %&gt;<br>    &lt;main class&#x3D;&quot;main&quot;&gt;<br>      &lt;%- body %&gt;<br>    &lt;&#x2F;main&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>\n<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <code>Templates | Hexo</code>。<br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;head&gt;<br>  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>  &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>  &lt;title&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br></code></pre></td></tr></table></figure>\n<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，<code>Hexo</code> 还提供了许多变量可在模板中使用，详见 <code>Variables | Hexo</code>。<br><code>layout/_partial/header.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>        &lt;a href&#x3D;&quot;&#x2F;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;Home&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>      &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>        &lt;a href&#x3D;&quot;&#x2F;archives&quot; class&#x3D;&quot;menu-item-link&quot;&gt;Archive&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&lt;h2&gt;Hello World&lt;/h2&gt;</code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&lt;%- body %&gt;</code> 的位置。我们将得到一个有导航菜单的 <code>Hello World</code> 页面。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg\"></p>\n<h2 id=\"添加主题配置文件\"><a href=\"#添加主题配置文件\" class=\"headerlink\" title=\"添加主题配置文件\"></a>添加主题配置文件</h2><p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过<code>theme</code>这个变量来拿到该配置文件中的配置。<br><code>theme-demo/_config.yml:</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br></code></pre></td></tr></table></figure>\n<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;% for (name in theme.menu) &#123; %&gt;<br>        &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>          &lt;a href&#x3D;&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;&lt;%&#x3D; name %&gt;&lt;&#x2F;a&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 <code>Github</code> 的链接：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">https://github.com/ahonn</span><br></code></pre></td></tr></table></figure>\n<p>除此之外还可以添加其他需要的配置，例如 <code>RSS</code>，评论等等。</p>\n<h2 id=\"添加首页文章列表\"><a href=\"#添加首页文章列表\" class=\"headerlink\" title=\"添加首页文章列表\"></a>添加首页文章列表</h2><p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 <code>Hexo</code> 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href=\"https://hexo.io/docs/variables.html#Page-Variables\">这里</a>。<br>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;section class&#x3D;&quot;posts&quot;&gt;<br>  &lt;% page.posts.each(function (post) &#123; %&gt;<br>    &lt;article class&#x3D;&quot;post&quot;&gt;<br>      &lt;div class&#x3D;&quot;post-title&quot;&gt;<br>        &lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%&#x3D; post.title %&gt;&lt;&#x2F;a&gt;<br>      &lt;&#x2F;div&gt;<br>      &lt;div class&#x3D;&quot;post-content&quot;&gt;<br>        &lt;%- post.content %&gt;<br>      &lt;&#x2F;div&gt;<br>      &lt;div class&#x3D;&quot;post-meta&quot;&gt;<br>        &lt;span class&#x3D;&quot;post-time&quot;&gt;&lt;%- date(post.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>      &lt;&#x2F;div&gt;<br>    &lt;&#x2F;article&gt;<br>  &lt;% &#125;) %&gt;<br>&lt;&#x2F;section&gt;<br></code></pre></td></tr></table></figure>\n<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 <code>Hexo</code> 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 <code>Hexo</code> 的辅助函数。</p>\n<h2 id=\"文章摘录\"><a href=\"#文章摘录\" class=\"headerlink\" title=\"文章摘录\"></a>文章摘录</h2><p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。<br><code>Hexo</code> 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&lt;!-- more --&gt;</code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;div class&#x3D;&quot;post-content&quot;&gt;<br>  &lt;%- post.excerpt %&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加页面样式\"><a href=\"#添加页面样式\" class=\"headerlink\" title=\"添加页面样式\"></a>添加页面样式</h2><p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。<br>由于 <code>Hexo</code> 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。<code>Hexo</code> 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 <code>styl</code> 为 <code>css</code> 文件。<br>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.style</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。<br><code>_partial/header.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.header</span> &#123;<br>  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span><br>  display: flex<br>  align-items: baseline<br>  justify-content: space-between<br><br>  .blog-title .logo &#123;<br>    color: <span class=\"hljs-number\">#AAA</span>;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2em</span>;<br>    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&quot;Comic Sans MS&quot;</span>,cursive,LiSu,sans-serif;<br>    <span class=\"hljs-attribute\">text-decoration</span>: none;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br><br>    .menu-item &#123;<br>      <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>      <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>    &#125;<br><br>    <span class=\"hljs-selector-class\">.menu-item-link</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#AAA</span>;<br>      <span class=\"hljs-attribute\">text-decoration</span>: none;<br><br>      &amp;:hover &#123;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/post.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.post</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.posts</span>  &#123;<br>  <span class=\"hljs-attribute\">.post</span>:first-child &#123;<br>    margin-top: <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.5em</span>;<br><br>    .post-title-link &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-content</span> &#123;<br>    a &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-meta</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#BABABA</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>style.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F2F2F2</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.25rem</span>;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">960px</span>;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>&#125;<br><br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/header&quot;</span>;<br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/post&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <code>css():</code><br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;head&gt;<br>  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>  &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>  &lt;title&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;title&gt;<br>  &lt;%- css(&#39;css&#x2F;style.css&#39;) %&gt;<br>&lt;&#x2F;head&gt;<br></code></pre></td></tr></table></figure>\n<p>至此，我们会看到站点的首页是这个样子的：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg\"></p>\n<h2 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h2><p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 <code>10+</code> 次，再查看站点首页。会发现，首页只显示了 <code>10</code> 篇文章。<br>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。<br>新建 <code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if (page.total &gt; 1)&#123; %&gt;<br>  &lt;nav class&#x3D;&quot;page-nav&quot;&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: &quot;&amp;laquo; Prev&quot;,<br>      next_text: &quot;Next &amp;raquo;&quot;<br>    &#125;) %&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">...<br>&lt;/section&gt;<br>&lt;%- paginator(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>这里我们使用到了另外的一个辅助函数 <code>paginator</code>，它能够帮助我们插入分页链接。<br>添加文章详情页<br>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;article class&#x3D;&quot;post&quot;&gt;<br>  &lt;div class&#x3D;&quot;post-title&quot;&gt;<br>    &lt;h2 class&#x3D;&quot;title&quot;&gt;&lt;%&#x3D; page.title %&gt;&lt;&#x2F;h2&gt;<br>  &lt;&#x2F;div&gt;<br>   &lt;div class&#x3D;&quot;post-meta&quot;&gt;<br>    &lt;span class&#x3D;&quot;post-time&quot;&gt;&lt;%- date(page.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;div class&#x3D;&quot;post-content&quot;&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;article&gt;<br></code></pre></td></tr></table></figure>\n<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>\n<h2 id=\"添加归档页\"><a href=\"#添加归档页\" class=\"headerlink\" title=\"添加归档页\"></a>添加归档页</h2><p>创建归档页使用的模板文件 <code>archive.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;section class&#x3D;&quot;archive&quot;&gt;<br>  &lt;ul class&#x3D;&quot;post-archive&quot;&gt;<br>    &lt;% page.posts.each(function (post) &#123; %&gt;<br>      &lt;li class&#x3D;&quot;post-item&quot;&gt;<br>        &lt;span class&#x3D;&quot;post-date&quot;&gt;&lt;%&#x3D; date(post.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>        &lt;a class&#x3D;&quot;post-title&quot; href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%&#x3D; post.title %&gt;&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;% &#125;) %&gt;<br>  &lt;&#x2F;ul&gt;<br>&lt;&#x2F;section&gt;<br>&lt;%- partial(&#39;_partial&#x2F;paginator&#39;) %&gt;<br></code></pre></td></tr></table></figure>\n<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：<br><code>css/_partial/archive.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.archive</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br><br>  .post-archive &#123;<br>    <span class=\"hljs-selector-tag\">list-style</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    <span class=\"hljs-selector-tag\">padding</span>: 0;<br><br>    <span class=\"hljs-selector-class\">.post-item</span> &#123;<br>      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;<br><br>      .post-date &#123;<br>        <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>        <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#BABABA</span>;<br>      &#125;<br><br>      <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#368CCB</span>;<br>        <span class=\"hljs-attribute\">text-decoration</span>: none;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 <code>i18n</code> 的。站点的语言设置为站点配置文件中的 <code>language</code>。<br>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">Home</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">Archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">Github</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">Prev</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">Next</span><br></code></pre></td></tr></table></figure>\n<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：<br><code>_partial/header.ejs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;% for (name in theme.menu) &#123; %&gt;<br>        &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>          &lt;a href&#x3D;&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;&lt;%- __(&#39;Menu.&#39; + name) %&gt;&lt;&#x2F;a&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if (page.total &gt; 1)&#123; %&gt;<br>  &lt;nav class&#x3D;&quot;page-nav&quot;&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: &quot;&amp;laquo;&quot; + __(&#39;Paginator.Prev&#39;),<br>      next_text: __(&#39;Paginator.Next&#39;) + &quot;&amp;raquo;&quot;<br>    &#125;) %&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：<br><code>languages/zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">首页</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">归档</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">交友</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">上一页</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">下一页</span><br></code></pre></td></tr></table></figure>\n<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>\n<h2 id=\"hexo函数\"><a href=\"#hexo函数\" class=\"headerlink\" title=\"hexo函数\"></a>hexo函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;%- __(&#39;Menu.&#39; + name) %&gt;<br></code></pre></td></tr></table></figure>\n<p>__下划线函数在 <code>hexo</code> 变量 可以查看 <code>Lodash</code> 函数，专门用于<code>json</code>取值<br>最后总结<br>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 <code>Hexo</code> 主题有了一定的了解。其实说白了，<code>Hexo</code> 就是把那些 <code>Markdown</code> 文件按照不同的布局模板，填上对应的数据生成 <code>HTML</code> 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 <code>stylus/less/sass</code> 等文件编译。<br>本文并没有提及有关页面 <code>JavaScript</code> 的部分，实际上与写 <code>CSS</code> 样式相同。在 <code>source/js</code> 中写 <code>JavaScript</code> 脚本，然后在模板中引入即可。<br>感谢阅读，希望对你有所帮助。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文将会从零开始开发一个简单的博客主题。样式主要参考 <code>Hexo theme</code> 中的 <code>Noise</code> 主题。</p>","more":"<p>开始之前你需要了解：</p>\n<ul>\n<li>模板引擎 ejs官网</li>\n<li>CSS预处理器</li>\n<li>Hexo 文档</li>\n</ul>\n<p>本文使用的模板引擎为 <code>ejs</code>，使用的 CSS 预处理器为 <code>stylus</code>。这也是 <code>hexo</code> 项目预装了的 <code>render</code> 插件，如果想使用其他模板引擎或者其他 <code>CSS</code> 预处理器，可以安装相对应的 <code>render</code> 插件。例如我的 <code>Even</code> 主题使用的是 <code>Swig</code> 与 <code>SCSS</code>。<br>目录结构<br>主题目录结构以自带的 <code>landscape</code> 主题为例：<br>.<br>├── languages  语言文件，用于国际化<br>├── layout     页面模板文件<br>├── scripts    Hexo 脚本<br>└── source     主题资源文件，包括页面样式，脚本，字体等<br>我们在 themes 中新建 <code>theme-example</code> 文件夹，然后在 <code>theme-demo</code> 中按照 <code>landscape</code> 主题的目录结构新建 <code>languages</code>，<code>layout</code>，<code>scripts</code> 与 source 文件夹。</p>\n<h2 id=\"创建布局模板\"><a href=\"#创建布局模板\" class=\"headerlink\" title=\"创建布局模板\"></a>创建布局模板</h2><p>在 <code>layout</code> 中创建 <code>index.ejs</code> 文件，首页将会使用该布局模板生成 HTML 文件。<br><code>layout/index.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>    &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>    &lt;title&gt;Home&lt;&#x2F;title&gt;<br>  &lt;&#x2F;head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Hello Word&lt;&#x2F;h1&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>\n<p>修改站点配置文件中的主题配置，使用我们刚刚创建的 <code>theme-example</code> 主题：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-comment\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"hljs-comment\">## Themes: https://hexo.io/themes/</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">theme-example</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p><code>hexo clean</code>   清除<code>public</code>静态文件<br><code>hexo generate</code> 生成<code>public</code>静态文件<br><code>hexo server --debug</code> 以 <code>debug</code> 模式开启 <code>Hexo</code> 本地服务器预览，访问 <a href=\"http://localhost:4000/%E3%80%82\">http://localhost:4000/。</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tNc79gw1farp8irho3j30dq058t8s.jpg\"></p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>在工作文件夹中执行这条命令来新建一篇文章，<code>title</code>即为文章的标题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs plain\">hexo new &lt;title&gt;　　<br></code></pre></td></tr></table></figure>\n<p>终端会返回一条信息，告诉你文章源文件存放在哪里：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/826333/201906/826333-20190604095056843-1809346942.png\"></p>\n<h2 id=\"添加页面导航\"><a href=\"#添加页面导航\" class=\"headerlink\" title=\"添加页面导航\"></a>添加页面导航</h2><p>现在我们需要在页面中添加导航，由于导航不单单会在首页出现，所以我们在 <code>layout</code> 中创建共用的布局文件 <code>layout.ejs</code>， 同时创建 <code>_partial/head.ejs</code> 保存 HTML 的 <code>head</code> 以及创建 <code>_partial/header.ejs</code> 文件，编写页面导航部分。<br><code>layout/layout.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;%- partial(&#39;_partial&#x2F;head&#39;) %&gt;<br>  &lt;body&gt;<br>    &lt;%- partial(&#39;_partial&#x2F;header&#39;) %&gt;<br>    &lt;main class&#x3D;&quot;main&quot;&gt;<br>      &lt;%- body %&gt;<br>    &lt;&#x2F;main&gt;<br>  &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>\n<p><code>layout.ejs</code> 文件通过 <code>partial()</code> 函数来包含其他文件，使得我们能够更好的组织代码。详见 <code>Templates | Hexo</code>。<br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;head&gt;<br>  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>  &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>  &lt;title&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br></code></pre></td></tr></table></figure>\n<p>这里使用了 <code>config</code> 变量，该变量包含的是站点配置（即站点根目录下 <code>_config.yml</code> 中的配置）。除此之外，<code>Hexo</code> 还提供了许多变量可在模板中使用，详见 <code>Variables | Hexo</code>。<br><code>layout/_partial/header.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>        &lt;a href&#x3D;&quot;&#x2F;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;Home&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>      &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>        &lt;a href&#x3D;&quot;&#x2F;archives&quot; class&#x3D;&quot;menu-item-link&quot;&gt;Archive&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p>接着我们清空 <code>index.ejs</code> 中的内容，并添加 <code>&lt;h2&gt;Hello World&lt;/h2&gt;</code>。在 <code>layout</code> 目录下的 <code>index.ejs</code> 会自动继承 <code>layout.ejs</code>，并将其中的内容填入 <code>&lt;%- body %&gt;</code> 的位置。我们将得到一个有导航菜单的 <code>Hello World</code> 页面。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1farv6wgpe1j308t05tjrk.jpg\"></p>\n<h2 id=\"添加主题配置文件\"><a href=\"#添加主题配置文件\" class=\"headerlink\" title=\"添加主题配置文件\"></a>添加主题配置文件</h2><p>实际上我们需要让导航菜单根据我们的需要显示不同的项，上面这种写法不方便修改。所以我们会在主题的配置文件中添加导航菜单的配置。在 <code>thmem-demo</code> 下新建主题的配置文件 <code>_config.yml</code>，在其中添加需要配置的字段。然后可以通过<code>theme</code>这个变量来拿到该配置文件中的配置。<br><code>theme-demo/_config.yml:</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br></code></pre></td></tr></table></figure>\n<p>这样我们就可以在 <code>header.ejs</code> 中使用 <code>theme.menu</code> 获取到导航菜单的设置。将 <code>header.ejs</code> 修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;% for (name in theme.menu) &#123; %&gt;<br>        &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>          &lt;a href&#x3D;&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;&lt;%&#x3D; name %&gt;&lt;&#x2F;a&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p>当需要在导航中添加链接的时候就可以在配置文件中直接添加，例如添加 <code>Github</code> 的链接：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">/</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">/archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">https://github.com/ahonn</span><br></code></pre></td></tr></table></figure>\n<p>除此之外还可以添加其他需要的配置，例如 <code>RSS</code>，评论等等。</p>\n<h2 id=\"添加首页文章列表\"><a href=\"#添加首页文章列表\" class=\"headerlink\" title=\"添加首页文章列表\"></a>添加首页文章列表</h2><p>接着我们完善首页的模板，使其能够显示文章列表。前面已经说过 <code>Hexo</code> 提供了各种有用的变量，在这里将会使用到 <code>page</code> 这个变量。<code>page</code> 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看<a href=\"https://hexo.io/docs/variables.html#Page-Variables\">这里</a>。<br>那么这里我们会使用 <code>page</code> 变量的 <code>posts</code> 属性拿到文章数据的集合。编辑 <code>index.ejs</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;section class&#x3D;&quot;posts&quot;&gt;<br>  &lt;% page.posts.each(function (post) &#123; %&gt;<br>    &lt;article class&#x3D;&quot;post&quot;&gt;<br>      &lt;div class&#x3D;&quot;post-title&quot;&gt;<br>        &lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%&#x3D; post.title %&gt;&lt;&#x2F;a&gt;<br>      &lt;&#x2F;div&gt;<br>      &lt;div class&#x3D;&quot;post-content&quot;&gt;<br>        &lt;%- post.content %&gt;<br>      &lt;&#x2F;div&gt;<br>      &lt;div class&#x3D;&quot;post-meta&quot;&gt;<br>        &lt;span class&#x3D;&quot;post-time&quot;&gt;&lt;%- date(post.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>      &lt;&#x2F;div&gt;<br>    &lt;&#x2F;article&gt;<br>  &lt;% &#125;) %&gt;<br>&lt;&#x2F;section&gt;<br></code></pre></td></tr></table></figure>\n<p>从 <code>page.posts</code> 中获取单篇文章的数据，并获取文章的标题，内容等数据填充到模板中。处理文章创建时间的时候使用了 <code>date()</code> 函数，这是 <code>Hexo</code> 提供的时间处理的辅助函数。本文中使用到的函数如无特别说明，即为 <code>Hexo</code> 的辅助函数。</p>\n<h2 id=\"文章摘录\"><a href=\"#文章摘录\" class=\"headerlink\" title=\"文章摘录\"></a>文章摘录</h2><p>由于首页显示文章内容时使用的是 <code>post.content</code>，即文章的全部内容。所以首页会显示每一篇文章的内容，实际上我们并不想在首页显示那么多内容，只想显示文章的摘录。<br><code>Hexo</code> 提供了 <code>excerpt</code> 属性来获取文章的摘录部分，不过这里需要在文章中添加一个 <code>&lt;!-- more --&gt;</code> 标记。添加了这个标记之后，<code>post.excerpt</code> 将会获取到标记之前的内容。如果没有这个标记，那么 <code>post.excerpt</code> 会是空的。所以我们可以把首页文章内容部分的 <code>post.content</code> 替换成 <code>post.excerpt</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;div class&#x3D;&quot;post-content&quot;&gt;<br>  &lt;%- post.excerpt %&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"添加页面样式\"><a href=\"#添加页面样式\" class=\"headerlink\" title=\"添加页面样式\"></a>添加页面样式</h2><p>到目前为止，我们完成了首页的页面结构，但是并没有添加样式，所以看起来很丑。我们在 <code>source</code> 文件中创建一个 <code>css</code> 文件夹来存放样式文件。<br>由于 <code>Hexo</code> 在新建项目的时候会安装 <code>hexo-renderer-stylus</code> 这个插件，所以我们无需其他步骤，只需要将样式文件放到 <code>css</code> 文件夹中。<code>Hexo</code> 在生成页面的时候会将 <code>source</code> 中的所有文件复制到生成的 <code>public</code> 文件中，并且在此之前会编译 <code>styl</code> 为 <code>css</code> 文件。<br>在 <code>css</code> 文件夹中创建 <code>style.styl</code>，编写一些基础的样式，并把所有样式 <code>import</code> 到这个文件。所以最终编译之后只会有 <code>style.css</code> 一个文件。创建 <code>_partial/header.styl</code> 与 <code>_partial/post.style</code> 存放页面导航以及文章的样式，并且在 <code>style.styl</code> 中 <code>import</code> 这两个文件。<br><code>_partial/header.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.header</span> &#123;<br>  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span><br>  display: flex<br>  align-items: baseline<br>  justify-content: space-between<br><br>  .blog-title .logo &#123;<br>    color: <span class=\"hljs-number\">#AAA</span>;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2em</span>;<br>    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&quot;Comic Sans MS&quot;</span>,cursive,LiSu,sans-serif;<br>    <span class=\"hljs-attribute\">text-decoration</span>: none;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br><br>    .menu-item &#123;<br>      <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>      <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>    &#125;<br><br>    <span class=\"hljs-selector-class\">.menu-item-link</span> &#123;<br>      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#AAA</span>;<br>      <span class=\"hljs-attribute\">text-decoration</span>: none;<br><br>      &amp;:hover &#123;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/post.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.post</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.posts</span>  &#123;<br>  <span class=\"hljs-attribute\">.post</span>:first-child &#123;<br>    margin-top: <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.5em</span>;<br><br>    .post-title-link &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-content</span> &#123;<br>    a &#123;<br>      <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#368CCB</span>;<br>      <span class=\"hljs-selector-tag\">text-decoration</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-selector-class\">.post-meta</span> &#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#BABABA</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>style.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F2F2F2</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.25rem</span>;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">1.5</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">960px</span>;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>&#125;<br><br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/header&quot;</span>;<br><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">&quot;_partial/post&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>最后，我们需要把样式添加到页面中，这里使用了另外一个辅助函数 <code>css():</code><br><code>layout/_partial/head.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;head&gt;<br>  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;<br>  &lt;meta content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;<br>  &lt;title&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;title&gt;<br>  &lt;%- css(&#39;css&#x2F;style.css&#39;) %&gt;<br>&lt;&#x2F;head&gt;<br></code></pre></td></tr></table></figure>\n<p>至此，我们会看到站点的首页是这个样子的：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tNc79gw1fasg7y42bqj314h0i6jv1.jpg\"></p>\n<h2 id=\"添加分页\"><a href=\"#添加分页\" class=\"headerlink\" title=\"添加分页\"></a>添加分页</h2><p>在站点的 <code>source/_post/</code> 目录下存放的是我们的文章，现在我们把原本的 <code>hello-world.md</code> 复制黏贴 <code>10+</code> 次，再查看站点首页。会发现，首页只显示了 <code>10</code> 篇文章。<br>首页显示的文章数量我们可以通过站点配置文件中的 <code>per_page</code> 字段来修改，但是我们不可能把所有文章都放在一页，所以我们现在来添加文章列表的分页。<br>新建 <code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if (page.total &gt; 1)&#123; %&gt;<br>  &lt;nav class&#x3D;&quot;page-nav&quot;&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: &quot;&amp;laquo; Prev&quot;,<br>      next_text: &quot;Next &amp;raquo;&quot;<br>    &#125;) %&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>在 <code>index.ejs</code> 中添加这个文件的内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">...<br>&lt;/section&gt;<br>&lt;%- paginator(<span class=\"hljs-string\">&#x27;_partial/paginator&#x27;</span>) %&gt;<br></code></pre></td></tr></table></figure>\n<p>这里我们使用到了另外的一个辅助函数 <code>paginator</code>，它能够帮助我们插入分页链接。<br>添加文章详情页<br>文章详情页对应的布局文件是 <code>post.ejs</code>，新建 <code>post.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;article class&#x3D;&quot;post&quot;&gt;<br>  &lt;div class&#x3D;&quot;post-title&quot;&gt;<br>    &lt;h2 class&#x3D;&quot;title&quot;&gt;&lt;%&#x3D; page.title %&gt;&lt;&#x2F;h2&gt;<br>  &lt;&#x2F;div&gt;<br>   &lt;div class&#x3D;&quot;post-meta&quot;&gt;<br>    &lt;span class&#x3D;&quot;post-time&quot;&gt;&lt;%- date(page.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;div class&#x3D;&quot;post-content&quot;&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;article&gt;<br></code></pre></td></tr></table></figure>\n<p>由于这里是文章的模板，所以变量 <code>page</code> 表示的是文章的数据，而不是首页的文章数据集合。</p>\n<h2 id=\"添加归档页\"><a href=\"#添加归档页\" class=\"headerlink\" title=\"添加归档页\"></a>添加归档页</h2><p>创建归档页使用的模板文件 <code>archive.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;section class&#x3D;&quot;archive&quot;&gt;<br>  &lt;ul class&#x3D;&quot;post-archive&quot;&gt;<br>    &lt;% page.posts.each(function (post) &#123; %&gt;<br>      &lt;li class&#x3D;&quot;post-item&quot;&gt;<br>        &lt;span class&#x3D;&quot;post-date&quot;&gt;&lt;%&#x3D; date(post.date, &quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;span&gt;<br>        &lt;a class&#x3D;&quot;post-title&quot; href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%&#x3D; post.title %&gt;&lt;&#x2F;a&gt;<br>      &lt;&#x2F;li&gt;<br>    &lt;% &#125;) %&gt;<br>  &lt;&#x2F;ul&gt;<br>&lt;&#x2F;section&gt;<br>&lt;%- partial(&#39;_partial&#x2F;paginator&#39;) %&gt;<br></code></pre></td></tr></table></figure>\n<p>其实结构跟首页差不多，只是不显示文章内容而已。添加归档页的样式：<br><code>css/_partial/archive.styl:</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.archive</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> auto;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">50px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;<br>  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">#ddd</span>;<br><br>  .post-archive &#123;<br>    <span class=\"hljs-selector-tag\">list-style</span>: <span class=\"hljs-selector-tag\">none</span>;<br>    <span class=\"hljs-selector-tag\">padding</span>: 0;<br><br>    <span class=\"hljs-selector-class\">.post-item</span> &#123;<br>      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;<br><br>      .post-date &#123;<br>        <span class=\"hljs-selector-tag\">display</span>: <span class=\"hljs-selector-tag\">inline-block</span>;<br>        <span class=\"hljs-selector-tag\">margin-right</span>: 10<span class=\"hljs-selector-tag\">px</span>;<br>        <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#BABABA</span>;<br>      &#125;<br><br>      <span class=\"hljs-selector-class\">.post-title</span> &#123;<br>        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#368CCB</span>;<br>        <span class=\"hljs-attribute\">text-decoration</span>: none;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><p>还记得我们一开始创建的 <code>languages</code> 文件夹吗？没错，它是用来添加多种语言，用于 <code>i18n</code> 的。站点的语言设置为站点配置文件中的 <code>language</code>。<br>当该字段为空时，默认使用的是 <code>languages/default.yml</code> 这个文件。那么现在我们来添加这个文件，我们决定主题的默认语言是英文：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">Home</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">Archives</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">Github</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">Prev</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">Next</span><br></code></pre></td></tr></table></figure>\n<p>目前我们需要主题根据选择的语言自动修改的有上面这些，接着我们需要修改 <code>header.ejs</code> 与 <code>paginator.ejs</code> 这两个文件：<br><code>_partial/header.ejs</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;header class&#x3D;&quot;header&quot;&gt;<br>  &lt;div class&#x3D;&quot;blog-title&quot;&gt;<br>    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;a&gt;<br>  &lt;&#x2F;div&gt;<br>  &lt;nav class&#x3D;&quot;navbar&quot;&gt;<br>    &lt;ul class&#x3D;&quot;menu&quot;&gt;<br>      &lt;% for (name in theme.menu) &#123; %&gt;<br>        &lt;li class&#x3D;&quot;menu-item&quot;&gt;<br>          &lt;a href&#x3D;&quot;&lt;%- url_for(theme.menu[name]) %&gt;&quot; class&#x3D;&quot;menu-item-link&quot;&gt;&lt;%- __(&#39;Menu.&#39; + name) %&gt;&lt;&#x2F;a&gt;<br>        &lt;&#x2F;li&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;ul&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;&#x2F;header&gt;<br></code></pre></td></tr></table></figure>\n<p><code>_partial/paginator.ejs:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if (page.total &gt; 1)&#123; %&gt;<br>  &lt;nav class&#x3D;&quot;page-nav&quot;&gt;<br>    &lt;%- paginator(&#123;<br>      prev_text: &quot;&amp;laquo;&quot; + __(&#39;Paginator.Prev&#39;),<br>      next_text: __(&#39;Paginator.Next&#39;) + &quot;&amp;raquo;&quot;<br>    &#125;) %&gt;<br>  &lt;&#x2F;nav&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n<p>修改之后其实与之前相比没有什么变化，起码看起来是。现在我们添加一个中文的文件：<br><code>languages/zh-CN.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">Menu:</span><br>  <span class=\"hljs-attr\">Home:</span> <span class=\"hljs-string\">首页</span><br>  <span class=\"hljs-attr\">Archives:</span> <span class=\"hljs-string\">归档</span><br>  <span class=\"hljs-attr\">Github:</span> <span class=\"hljs-string\">交友</span><br><br><span class=\"hljs-attr\">Paginator:</span><br>  <span class=\"hljs-attr\">Prev:</span> <span class=\"hljs-string\">上一页</span><br>  <span class=\"hljs-attr\">Next:</span> <span class=\"hljs-string\">下一页</span><br></code></pre></td></tr></table></figure>\n<p>然后我们将站点配置文件中的 <code>language</code> 字段修改为 <code>zh-CN</code>（与 <code>zh-CN.yml</code> 文件名相同）。再次访问站点之后就会发现导航与分页部分的文字变成了中文。</p>\n<h2 id=\"hexo函数\"><a href=\"#hexo函数\" class=\"headerlink\" title=\"hexo函数\"></a>hexo函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;%- __(&#39;Menu.&#39; + name) %&gt;<br></code></pre></td></tr></table></figure>\n<p>__下划线函数在 <code>hexo</code> 变量 可以查看 <code>Lodash</code> 函数，专门用于<code>json</code>取值<br>最后总结<br>如果你有耐心看我废话了这么多的话，恭喜你，你应该对怎么去写一个 <code>Hexo</code> 主题有了一定的了解。其实说白了，<code>Hexo</code> 就是把那些 <code>Markdown</code> 文件按照不同的布局模板，填上对应的数据生成 <code>HTML</code> 页面，复制 <code>source</code> 中的到生成的 <code>public</code> 文件夹中，中间过程会把需要编译的 <code>stylus/less/sass</code> 等文件编译。<br>本文并没有提及有关页面 <code>JavaScript</code> 的部分，实际上与写 <code>CSS</code> 样式相同。在 <code>source/js</code> 中写 <code>JavaScript</code> 脚本，然后在模板中引入即可。<br>感谢阅读，希望对你有所帮助。</p>"},{"title":"小恐龙外挂","mathjax":true,"date":"2021-01-14T12:02:41.000Z","link_c":"Game","link_name":"Dinosaur","top":4000,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\nChrome://dino  外挂(/doge)\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n修改内容：\n>  1.修改障碍物\n>  >  (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;\n>  >  (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;\n>  2.进入无敌模式                ：Runner.instance_.gameOver = function(){};\n>  3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);","source":"_posts/小恐龙外挂.md","raw":"---\ntitle: 小恐龙外挂\nmathjax: true\ndate: 2021-01-14 20:02:41\nlink_c: Game\nlink_name: Dinosaur\ntop: 4000\ntags: Dino\ncategories: Game\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\nChrome://dino  外挂(/doge)\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n修改内容：\n>  1.修改障碍物\n>  >  (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;\n>  >  (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;\n>  2.进入无敌模式                ：Runner.instance_.gameOver = function(){};\n>  3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);","slug":"小恐龙外挂","published":1,"updated":"2021-01-28T12:05:20.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qea40009e8b1160sa9cf","content":"<p>Chrome://dino  外挂(/doge)</p>\n<a id=\"more\"></a>\n\n<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>修改内容：</p>\n<blockquote>\n<p> 1.修改障碍物</p>\n<blockquote>\n<p> (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;<br> (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;<br> 2.进入无敌模式                ：Runner.instance_.gameOver = function(){};<br> 3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);</p>\n</blockquote>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<p>Chrome://dino  外挂(/doge)</p>","more":"<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>修改内容：</p>\n<blockquote>\n<p> 1.修改障碍物</p>\n<blockquote>\n<p> (1)改为true，障碍物消失 ：Runner.instance_.playingIntro = true;<br> (2)改为false，障碍物恢复：Runner.instance_.playingIntro = false;<br> 2.进入无敌模式                ：Runner.instance_.gameOver = function(){};<br> 3.修改小恐龙移动速度     ：Runner.instance_.setSpeed(数值);</p>\n</blockquote>\n</blockquote>"},{"title":"洛谷 P2295-MICE","date":"2020-10-23T10:26:55.000Z","link_c":"Explanation","link_name":"Luogu-P2295-Mice","top":1001,"mathjax":true,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\n\n\n## 题目大意\n\n一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）\n\n<!--more-->\n\n## 思路\n\n&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。\n\n&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：\n\n&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。\n\n&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.\n那么我们这样就得到了状态转移方程和预处理。预处理`val[i][j]`数组表示第`i`行`j`列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。\n\n&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右\n\n### 初始化\n\n```c++\nfor(int i=0;i<=n;i++)\n\tfor(int j=0;j<=m;j++)\n\t\tv[i][j]+=a[i][j+1]+a[i+1][j];//记录当前点右边和下边的1的个数\nmemset(f,0x3f,sizeof(f));\nf[1][0][0]=f[1][0][1]=v[1][0]; \nf[0][1][0]=f[0][1][1]=v[0][1];\nf[1][1][0]=f[1][1][1]=0;\n```\n\n### 状态转移\n\n- 从左边来：`f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);`\n\n- 从右边来：`f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);`\n\n### 总代码\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint n,m,v[1010][1010],f[1010][1010][2];\nint a[1010][1010];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=0;i<=n;i++)\n\t\tfor(int j=0;j<=m;j++)\n\t\t\tv[i][j]+=a[i][j+1]+a[i+1][j];\n\tmemset(f,0x3f,sizeof(f));\n\tf[1][0][0]=f[1][0][1]=v[1][0]; \n\tf[0][1][0]=f[0][1][1]=v[0][1];\n\tf[1][1][0]=f[1][1][1]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tf[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);\n\t\t\tf[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);\n\t\t\t//cout<<f[i][j][0]<<' '<<f[i][j][1]<<\" * \";\n\t\t}\n\t\t//cout<<endl;\n\t}\n\tcout<<min(f[n][m][0],f[n][m][1]);\n\treturn 0;\n} \n```","source":"_posts/洛谷 P2295-MICE 题解.md","raw":"---\ntitle: '洛谷 P2295-MICE'\ndate: 2020-10-23 18:26:55\nlink_c: Explanation\nlink_name: Luogu-P2295-Mice\ntop: 1001\nmathjax: true\ntags: Luogu\ncategories: C++\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\n\n\n## 题目大意\n\n一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）\n\n<!--more-->\n\n## 思路\n\n&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。\n\n&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：\n\n&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。\n\n&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.\n那么我们这样就得到了状态转移方程和预处理。预处理`val[i][j]`数组表示第`i`行`j`列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。\n\n&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右\n\n### 初始化\n\n```c++\nfor(int i=0;i<=n;i++)\n\tfor(int j=0;j<=m;j++)\n\t\tv[i][j]+=a[i][j+1]+a[i+1][j];//记录当前点右边和下边的1的个数\nmemset(f,0x3f,sizeof(f));\nf[1][0][0]=f[1][0][1]=v[1][0]; \nf[0][1][0]=f[0][1][1]=v[0][1];\nf[1][1][0]=f[1][1][1]=0;\n```\n\n### 状态转移\n\n- 从左边来：`f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);`\n\n- 从右边来：`f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);`\n\n### 总代码\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nint n,m,v[1010][1010],f[1010][1010][2];\nint a[1010][1010];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tcin>>a[i][j];\n\tfor(int i=0;i<=n;i++)\n\t\tfor(int j=0;j<=m;j++)\n\t\t\tv[i][j]+=a[i][j+1]+a[i+1][j];\n\tmemset(f,0x3f,sizeof(f));\n\tf[1][0][0]=f[1][0][1]=v[1][0]; \n\tf[0][1][0]=f[0][1][1]=v[0][1];\n\tf[1][1][0]=f[1][1][1]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tf[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);\n\t\t\tf[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);\n\t\t\t//cout<<f[i][j][0]<<' '<<f[i][j][1]<<\" * \";\n\t\t}\n\t\t//cout<<endl;\n\t}\n\tcout<<min(f[n][m][0],f[n][m][1]);\n\treturn 0;\n} \n```","slug":"洛谷 P2295-MICE 题解","published":1,"updated":"2021-01-28T12:05:47.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qea5000be8b171uca8m1","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。</p>\n<p>&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：</p>\n<p>&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。</p>\n<p>&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.<br>那么我们这样就得到了状态转移方程和预处理。预处理<code>val[i][j]</code>数组表示第<code>i</code>行<code>j</code>列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。</p>\n<p>&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<span class=\"hljs-comment\">//记录当前点右边和下边的1的个数</span><br><span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a>状态转移</h3><ul>\n<li><p>从左边来：<code>f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);</code></p>\n</li>\n<li><p>从右边来：<code>f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);</code></p>\n</li>\n</ul>\n<h3 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> n,m,v[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>],f[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t\t<span class=\"hljs-built_in\">cin</span>&gt;&gt;a[i][j];<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<br>\t<span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>\tf[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t&#123;<br>\t\t\tf[i][j][<span class=\"hljs-number\">0</span>]=min(f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]+v[i][j]+a[i<span class=\"hljs-number\">-1</span>][j],f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]+v[i][j]);<br>\t\t\tf[i][j][<span class=\"hljs-number\">1</span>]=min(f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">1</span>]+v[i][j]+a[i][j<span class=\"hljs-number\">-1</span>],f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">0</span>]+v[i][j]);<br>\t\t\t<span class=\"hljs-comment\">//cout&lt;&lt;f[i][j][0]&lt;&lt;&#x27; &#x27;&lt;&lt;f[i][j][1]&lt;&lt;&quot; * &quot;;</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//cout&lt;&lt;endl;</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;min(f[n][m][<span class=\"hljs-number\">0</span>],f[n][m][<span class=\"hljs-number\">1</span>]);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>一个矩阵，每个元素均为0或1，要求从左上角到右下角的路径中，走过的格子和上下左右四个格子的1最少，输出1的个数（只能向下或右走）</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>&#8195;从左上角到右下角的最少一的个数，这明显是一个DP题，那就应该推导DP转移方程了，首先，一个点应该有两种情况，从左边来或从上边来，因此数组应有1维是方向，而剩下还要两维是这个点的位置。</p>\n<p>&#8195;但是预处理也是有点门道的，我在开始预处理的时候想的是在当前点上下左右的都加起来，但是写完以后发现答案要大好多，仔细分析一下，我们可以发现几个特点：</p>\n<p>&#8195;1、当前点由左边或上边转移而来，所以左边或上边已经能够看到当前点的左边和上边的点，所以只需要预处理该点下和右边的数量。</p>\n<p>&#8195;2、当前点是从左或上转移而来，如果上边的点仍然从上边转移来，那么该点的左边一定是没有统计过的，而从左边转移来的点上一次转移还是左边也是一样的，该点上边的点一定没有统计，所以我们就需要第三维来记录从左还是上转移而来。数组也就变成了 $f[i][j][1]$，和 $f[i][j][0]$，分别表示从左边来还是从右边来。如果一直从左转移，那么需要加上上边的害怕值，从上同理.<br>那么我们这样就得到了状态转移方程和预处理。预处理<code>val[i][j]</code>数组表示第<code>i</code>行<code>j</code>列会得到的害怕值，根据上边的分析得到只需要看这个点右边和下边即可。</p>\n<p>&#8195;$f_{i,j,0/1}$ i，j是位置，0指左，1指右</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<span class=\"hljs-comment\">//记录当前点右边和下边的1的个数</span><br><span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a>状态转移</h3><ul>\n<li><p>从左边来：<code>f[i][j][0]=min(f[i][j-1][0]+v[i][j]+a[i-1][j],f[i][j-1][1]+v[i][j]);</code></p>\n</li>\n<li><p>从右边来：<code>f[i][j][1]=min(f[i-1][j][1]+v[i][j]+a[i][j-1],f[i-1][j][0]+v[i][j]);</code></p>\n</li>\n</ul>\n<h3 id=\"总代码\"><a href=\"#总代码\" class=\"headerlink\" title=\"总代码\"></a>总代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> n,m,v[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>],f[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">1010</span>][<span class=\"hljs-number\">1010</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t\t<span class=\"hljs-built_in\">cin</span>&gt;&gt;a[i][j];<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=n;i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;=m;j++)<br>\t\t\tv[i][j]+=a[i][j+<span class=\"hljs-number\">1</span>]+a[i+<span class=\"hljs-number\">1</span>][j];<br>\t<span class=\"hljs-built_in\">memset</span>(f,<span class=\"hljs-number\">0x3f</span>,<span class=\"hljs-keyword\">sizeof</span>(f));<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <br>\tf[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=v[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];<br>\tf[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=f[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=m;j++)<br>\t\t&#123;<br>\t\t\tf[i][j][<span class=\"hljs-number\">0</span>]=min(f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]+v[i][j]+a[i<span class=\"hljs-number\">-1</span>][j],f[i][j<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]+v[i][j]);<br>\t\t\tf[i][j][<span class=\"hljs-number\">1</span>]=min(f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">1</span>]+v[i][j]+a[i][j<span class=\"hljs-number\">-1</span>],f[i<span class=\"hljs-number\">-1</span>][j][<span class=\"hljs-number\">0</span>]+v[i][j]);<br>\t\t\t<span class=\"hljs-comment\">//cout&lt;&lt;f[i][j][0]&lt;&lt;&#x27; &#x27;&lt;&lt;f[i][j][1]&lt;&lt;&quot; * &quot;;</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//cout&lt;&lt;endl;</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;min(f[n][m][<span class=\"hljs-number\">0</span>],f[n][m][<span class=\"hljs-number\">1</span>]);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>"},{"title":"猫国建设者外挂","mathjax":true,"date":"2021-01-14T11:56:13.000Z","link_c":"Game","link_name":"Cats-Country","top":4000,"top_img":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","cover":"https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg","_content":"\n猫国建设者外挂\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n格式：ganePage.resPool.get(\"XXXXX\").value += XXXX\n物品：\n>  猫薄荷 catnip\n>  木材 wood\n>  矿物 minerals\n>  煤炭 coal\n>  铁锭 iron\n>  钛锭 titanium\n>  黄金 gold\n>  石油 oil\n>  铀 uanium\n>  难得素 unobainium\n>  喵力 manpower\n>  科研点 science\n>  文化点 culture\n>  信仰 faith\n>  喵星人 kittens\n>  斑马 zebras\n>  星图 starchart\n>  火箭 rocket\n>  时间通量 temporalFlux\n>  浮点运算能力 gflops\n>  哈希 hashrates\n>  皮革 furs\n>  象牙 ivory\n>  香料 spice\n>  独角兽 unicorns\n>  空角兽 alicorn\n>  眼泪 tears\n>  业力(貌似无法调整) karma \n>  领导力 paragon\n>  燃烧领导力 burnedParagon\n>  时光水晶 timeCrystal\n>  悲伤 sorrow\n>  礼盒 elderBox\n>  包装纸 wrappingPaper\n>  黑币 blackcoin\n>  横梁 beam\n>  石板 slab   \n>  混凝土 concrate\n>  金属板 plate\n>  钢铁 steel\n>  合金 alloy\n>  齿轮 gear\n>  脚手架 scaffold\n>  船 ship\n>  油轮 tanker\n>  煤油 kerosene\n>  手稿 manuspan\n>  羊皮纸 parchment\n>  摘要 compedium\n>  蓝图 blueprint\n>  钍 thorium\n>  巨石 megalith\n>  死灵兽 necrocorn\n>  E合金 eludium\n>  虚空 void\n>  圣遗物 relic\n>  反物质 antimatter","source":"_posts/猫国建设者外挂.md","raw":"---\ntitle: 猫国建设者外挂\nmathjax: true\ndate: 2021-01-14 19:56:13\nlink_c: Game\nlink_name: Cats-Country\ntop: 4000\ntags: Cats\ncategories: Game\ntop_img: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\ncover: https://cdn.jsdelivr.net/gh/beelake/Picture/background/2.jpg\n---\n\n猫国建设者外挂\n\n<!-- more -->\n\n修改方式：F12打开控制台，在Console下输入命令，回车执行。\n格式：ganePage.resPool.get(\"XXXXX\").value += XXXX\n物品：\n>  猫薄荷 catnip\n>  木材 wood\n>  矿物 minerals\n>  煤炭 coal\n>  铁锭 iron\n>  钛锭 titanium\n>  黄金 gold\n>  石油 oil\n>  铀 uanium\n>  难得素 unobainium\n>  喵力 manpower\n>  科研点 science\n>  文化点 culture\n>  信仰 faith\n>  喵星人 kittens\n>  斑马 zebras\n>  星图 starchart\n>  火箭 rocket\n>  时间通量 temporalFlux\n>  浮点运算能力 gflops\n>  哈希 hashrates\n>  皮革 furs\n>  象牙 ivory\n>  香料 spice\n>  独角兽 unicorns\n>  空角兽 alicorn\n>  眼泪 tears\n>  业力(貌似无法调整) karma \n>  领导力 paragon\n>  燃烧领导力 burnedParagon\n>  时光水晶 timeCrystal\n>  悲伤 sorrow\n>  礼盒 elderBox\n>  包装纸 wrappingPaper\n>  黑币 blackcoin\n>  横梁 beam\n>  石板 slab   \n>  混凝土 concrate\n>  金属板 plate\n>  钢铁 steel\n>  合金 alloy\n>  齿轮 gear\n>  脚手架 scaffold\n>  船 ship\n>  油轮 tanker\n>  煤油 kerosene\n>  手稿 manuspan\n>  羊皮纸 parchment\n>  摘要 compedium\n>  蓝图 blueprint\n>  钍 thorium\n>  巨石 megalith\n>  死灵兽 necrocorn\n>  E合金 eludium\n>  虚空 void\n>  圣遗物 relic\n>  反物质 antimatter","slug":"猫国建设者外挂","published":1,"updated":"2021-01-28T12:05:27.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckki4qea7000ge8b184fd168r","content":"<p>猫国建设者外挂</p>\n<a id=\"more\"></a>\n\n<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>格式：ganePage.resPool.get(“XXXXX”).value += XXXX<br>物品：</p>\n<blockquote>\n<p> 猫薄荷 catnip<br> 木材 wood<br> 矿物 minerals<br> 煤炭 coal<br> 铁锭 iron<br> 钛锭 titanium<br> 黄金 gold<br> 石油 oil<br> 铀 uanium<br> 难得素 unobainium<br> 喵力 manpower<br> 科研点 science<br> 文化点 culture<br> 信仰 faith<br> 喵星人 kittens<br> 斑马 zebras<br> 星图 starchart<br> 火箭 rocket<br> 时间通量 temporalFlux<br> 浮点运算能力 gflops<br> 哈希 hashrates<br> 皮革 furs<br> 象牙 ivory<br> 香料 spice<br> 独角兽 unicorns<br> 空角兽 alicorn<br> 眼泪 tears<br> 业力(貌似无法调整) karma<br> 领导力 paragon<br> 燃烧领导力 burnedParagon<br> 时光水晶 timeCrystal<br> 悲伤 sorrow<br> 礼盒 elderBox<br> 包装纸 wrappingPaper<br> 黑币 blackcoin<br> 横梁 beam<br> 石板 slab<br> 混凝土 concrate<br> 金属板 plate<br> 钢铁 steel<br> 合金 alloy<br> 齿轮 gear<br> 脚手架 scaffold<br> 船 ship<br> 油轮 tanker<br> 煤油 kerosene<br> 手稿 manuspan<br> 羊皮纸 parchment<br> 摘要 compedium<br> 蓝图 blueprint<br> 钍 thorium<br> 巨石 megalith<br> 死灵兽 necrocorn<br> E合金 eludium<br> 虚空 void<br> 圣遗物 relic<br> 反物质 antimatter</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Doflake","link":"https://dofalke.github.io/","avatar":"https://cdn.jsdelivr.net/gh/doflake/Picture/Favicon/1.jpg","descr":"咕咕的小站"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网站框架"},{"name":"Azusemisa","link":"https://www.azusemisa.top/","avatar":"https://cdn.jsdelivr.net/gh/xiao-lin52/cdn-assets/images/avatar.webp","descr":"一个 OI 蒟蒻的小窝"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"<p>猫国建设者外挂</p>","more":"<p>修改方式：F12打开控制台，在Console下输入命令，回车执行。<br>格式：ganePage.resPool.get(“XXXXX”).value += XXXX<br>物品：</p>\n<blockquote>\n<p> 猫薄荷 catnip<br> 木材 wood<br> 矿物 minerals<br> 煤炭 coal<br> 铁锭 iron<br> 钛锭 titanium<br> 黄金 gold<br> 石油 oil<br> 铀 uanium<br> 难得素 unobainium<br> 喵力 manpower<br> 科研点 science<br> 文化点 culture<br> 信仰 faith<br> 喵星人 kittens<br> 斑马 zebras<br> 星图 starchart<br> 火箭 rocket<br> 时间通量 temporalFlux<br> 浮点运算能力 gflops<br> 哈希 hashrates<br> 皮革 furs<br> 象牙 ivory<br> 香料 spice<br> 独角兽 unicorns<br> 空角兽 alicorn<br> 眼泪 tears<br> 业力(貌似无法调整) karma<br> 领导力 paragon<br> 燃烧领导力 burnedParagon<br> 时光水晶 timeCrystal<br> 悲伤 sorrow<br> 礼盒 elderBox<br> 包装纸 wrappingPaper<br> 黑币 blackcoin<br> 横梁 beam<br> 石板 slab<br> 混凝土 concrate<br> 金属板 plate<br> 钢铁 steel<br> 合金 alloy<br> 齿轮 gear<br> 脚手架 scaffold<br> 船 ship<br> 油轮 tanker<br> 煤油 kerosene<br> 手稿 manuspan<br> 羊皮纸 parchment<br> 摘要 compedium<br> 蓝图 blueprint<br> 钍 thorium<br> 巨石 megalith<br> 死灵兽 necrocorn<br> E合金 eludium<br> 虚空 void<br> 圣遗物 relic<br> 反物质 antimatter</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckki4qe9x0001e8b15lfp9cmk","category_id":"ckki4qea10004e8b15rld0m39","_id":"ckki4qea8000ie8b1funl721l"},{"post_id":"ckki4qea00003e8b1dfusely6","category_id":"ckki4qea10004e8b15rld0m39","_id":"ckki4qeac000me8b17s5551wm"},{"post_id":"ckki4qea30007e8b1cej35fjb","category_id":"ckki4qea10004e8b15rld0m39","_id":"ckki4qead000pe8b10k7j8vmg"},{"post_id":"ckki4qea40009e8b1160sa9cf","category_id":"ckki4qeac000le8b1arx2dydt","_id":"ckki4qead000te8b17qxc1bcg"},{"post_id":"ckki4qea5000be8b171uca8m1","category_id":"ckki4qead000qe8b1aclgglqs","_id":"ckki4qeae000xe8b13gzg6j8w"},{"post_id":"ckki4qea7000ge8b184fd168r","category_id":"ckki4qeac000le8b1arx2dydt","_id":"ckki4qeae000ze8b17lbkd0kk"}],"PostTag":[{"post_id":"ckki4qe9x0001e8b15lfp9cmk","tag_id":"ckki4qea20005e8b1ah13e353","_id":"ckki4qea7000ee8b16hjagia1"},{"post_id":"ckki4qea00003e8b1dfusely6","tag_id":"ckki4qea20005e8b1ah13e353","_id":"ckki4qeac000ke8b13th0bd52"},{"post_id":"ckki4qea30007e8b1cej35fjb","tag_id":"ckki4qea20005e8b1ah13e353","_id":"ckki4qeac000oe8b14gdt10v2"},{"post_id":"ckki4qea40009e8b1160sa9cf","tag_id":"ckki4qeac000ne8b14tg61xz2","_id":"ckki4qead000se8b1fx3h0nk9"},{"post_id":"ckki4qea5000be8b171uca8m1","tag_id":"ckki4qead000re8b18jj13mj6","_id":"ckki4qeae000we8b1fyy4eine"},{"post_id":"ckki4qea7000ge8b184fd168r","tag_id":"ckki4qead000ve8b1aesohkjq","_id":"ckki4qeae000ye8b10qgz79es"}],"Tag":[{"name":"Hexo","_id":"ckki4qea20005e8b1ah13e353"},{"name":"Dino","_id":"ckki4qeac000ne8b14tg61xz2"},{"name":"Luogu","_id":"ckki4qead000re8b18jj13mj6"},{"name":"Cats","_id":"ckki4qead000ve8b1aesohkjq"}]}}